
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00002a02  00002a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c2  008000c2  00002af8  2**0
                  ALLOC
  3 .stab         000028d4  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001044  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000066c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 14 	call	0x28aa	; 0x28aa <main>
      8a:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	87 e9       	ldi	r24, 0x97	; 151
     b68:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8f e0       	ldi	r24, 0x0F	; 15
     b70:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b78:	e8 e3       	ldi	r30, 0x38	; 56
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8a ef       	ldi	r24, 0xFA	; 250
     b7e:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b80:	e5 e3       	ldi	r30, 0x35	; 53
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	88 e5       	ldi	r24, 0x58	; 88
     b86:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_enuSetPortDirection+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_enuSetPortDirection+0x8>
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
     bae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     bb0:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	a8 f5       	brcc	.+106    	; 0xc22 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3d 83       	std	Y+5, r19	; 0x05
     bc0:	2c 83       	std	Y+4, r18	; 0x04
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <DIO_enuSetPortDirection+0x62>
     bcc:	2c 81       	ldd	r18, Y+4	; 0x04
     bce:	3d 81       	ldd	r19, Y+5	; 0x05
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_enuSetPortDirection+0x42>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <DIO_enuSetPortDirection+0x58>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	3d 81       	ldd	r19, Y+5	; 0x05
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <DIO_enuSetPortDirection+0x6c>
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
     bec:	9d 81       	ldd	r25, Y+5	; 0x05
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <DIO_enuSetPortDirection+0x76>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 83       	st	Z, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	80 83       	st	Z, r24
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	80 83       	st	Z, r24
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
     c14:	e1 e3       	ldi	r30, 0x31	; 49
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <DIO_enuSetPortValue+0x6>
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_enuSetPortValue+0x8>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	8a 83       	std	Y+2, r24	; 0x02
     c48:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     c4a:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	84 30       	cpi	r24, 0x04	; 4
     c50:	a8 f5       	brcc	.+106    	; 0xcbc <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3d 83       	std	Y+5, r19	; 0x05
     c5a:	2c 83       	std	Y+4, r18	; 0x04
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	d1 f0       	breq	.+52     	; 0xc9a <DIO_enuSetPortValue+0x62>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_enuSetPortValue+0x42>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_enuSetPortValue+0x58>
     c78:	1e c0       	rjmp	.+60     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_enuSetPortValue+0x6c>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	81 f0       	breq	.+32     	; 0xcae <DIO_enuSetPortValue+0x76>
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
     c90:	eb e3       	ldi	r30, 0x3B	; 59
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	0e c0       	rjmp	.+28     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
     c9a:	e8 e3       	ldi	r30, 0x38	; 56
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
     ca4:	e5 e3       	ldi	r30, 0x35	; 53
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	80 83       	st	Z, r24
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
     cae:	e2 e3       	ldi	r30, 0x32	; 50
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enuTogPortValue+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <DIO_enuTogPortValue+0x8>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
     ce0:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	08 f0       	brcs	.+2      	; 0xcea <DIO_enuTogPortValue+0x18>
     ce8:	41 c0       	rjmp	.+130    	; 0xd6c <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3c 83       	std	Y+4, r19	; 0x04
     cf2:	2b 83       	std	Y+3, r18	; 0x03
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f0       	breq	.+58     	; 0xd38 <DIO_enuTogPortValue+0x66>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <DIO_enuTogPortValue+0x40>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	61 f0       	breq	.+24     	; 0xd28 <DIO_enuTogPortValue+0x56>
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <DIO_enuTogPortValue+0x94>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	b1 f0       	breq	.+44     	; 0xd48 <DIO_enuTogPortValue+0x76>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	c9 f0       	breq	.+50     	; 0xd58 <DIO_enuTogPortValue+0x86>
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
     d28:	ab e3       	ldi	r26, 0x3B	; 59
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	eb e3       	ldi	r30, 0x3B	; 59
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 95       	com	r24
     d34:	8c 93       	st	X, r24
     d36:	17 c0       	rjmp	.+46     	; 0xd66 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
     d38:	a8 e3       	ldi	r26, 0x38	; 56
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e8 e3       	ldi	r30, 0x38	; 56
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 95       	com	r24
     d44:	8c 93       	st	X, r24
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
     d48:	a5 e3       	ldi	r26, 0x35	; 53
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e3       	ldi	r30, 0x35	; 53
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 95       	com	r24
     d54:	8c 93       	st	X, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
     d58:	a2 e3       	ldi	r26, 0x32	; 50
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e2 e3       	ldi	r30, 0x32	; 50
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 95       	com	r24
     d64:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <DIO_enuGetPortValue+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <DIO_enuGetPortValue+0x8>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <DIO_enuGetPortValue+0xa>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	7c 83       	std	Y+4, r23	; 0x04
     d92:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     d94:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	09 f4       	brne	.+2      	; 0xda0 <DIO_enuGetPortValue+0x20>
     d9e:	41 c0       	rjmp	.+130    	; 0xe22 <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	d8 f5       	brcc	.+118    	; 0xe1c <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3e 83       	std	Y+6, r19	; 0x06
     dae:	2d 83       	std	Y+5, r18	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	e1 f0       	breq	.+56     	; 0xdf2 <DIO_enuGetPortValue+0x72>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_enuGetPortValue+0x4e>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	61 f0       	breq	.+24     	; 0xde4 <DIO_enuGetPortValue+0x64>
     dcc:	2c c0       	rjmp	.+88     	; 0xe26 <DIO_enuGetPortValue+0xa6>
     dce:	2d 81       	ldd	r18, Y+5	; 0x05
     dd0:	3e 81       	ldd	r19, Y+6	; 0x06
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	a1 f0       	breq	.+40     	; 0xe00 <DIO_enuGetPortValue+0x80>
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	b1 f0       	breq	.+44     	; 0xe0e <DIO_enuGetPortValue+0x8e>
     de2:	21 c0       	rjmp	.+66     	; 0xe26 <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
     de4:	e9 e3       	ldi	r30, 0x39	; 57
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
     df0:	1a c0       	rjmp	.+52     	; 0xe26 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
     df2:	e6 e3       	ldi	r30, 0x36	; 54
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	eb 81       	ldd	r30, Y+3	; 0x03
     dfa:	fc 81       	ldd	r31, Y+4	; 0x04
     dfc:	80 83       	st	Z, r24
     dfe:	13 c0       	rjmp	.+38     	; 0xe26 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
     e00:	e3 e3       	ldi	r30, 0x33	; 51
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	eb 81       	ldd	r30, Y+3	; 0x03
     e08:	fc 81       	ldd	r31, Y+4	; 0x04
     e0a:	80 83       	st	Z, r24
     e0c:	0c c0       	rjmp	.+24     	; 0xe26 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
     e0e:	e0 e3       	ldi	r30, 0x30	; 48
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	eb 81       	ldd	r30, Y+3	; 0x03
     e16:	fc 81       	ldd	r31, Y+4	; 0x04
     e18:	80 83       	st	Z, r24
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
     e26:	89 81       	ldd	r24, Y+1	; 0x01
}
     e28:	26 96       	adiw	r28, 0x06	; 6
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_enuSetPinDirection+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_enuSetPinDirection+0x8>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_enuSetPinDirection+0xa>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	6b 83       	std	Y+3, r22	; 0x03
     e4c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
     e4e:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	84 30       	cpi	r24, 0x04	; 4
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_enuSetPinDirection+0x1e>
     e56:	d1 c0       	rjmp	.+418    	; 0xffa <DIO_enuSetPinDirection+0x1c0>
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	88 30       	cpi	r24, 0x08	; 8
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <DIO_enuSetPinDirection+0x26>
     e5e:	cd c0       	rjmp	.+410    	; 0xffa <DIO_enuSetPinDirection+0x1c0>
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	08 f0       	brcs	.+2      	; 0xe68 <DIO_enuSetPinDirection+0x2e>
     e66:	c9 c0       	rjmp	.+402    	; 0xffa <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3e 83       	std	Y+6, r19	; 0x06
     e70:	2d 83       	std	Y+5, r18	; 0x05
     e72:	6d 81       	ldd	r22, Y+5	; 0x05
     e74:	7e 81       	ldd	r23, Y+6	; 0x06
     e76:	61 30       	cpi	r22, 0x01	; 1
     e78:	71 05       	cpc	r23, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <DIO_enuSetPinDirection+0x44>
     e7c:	41 c0       	rjmp	.+130    	; 0xf00 <DIO_enuSetPinDirection+0xc6>
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	91 05       	cpc	r25, r1
     e86:	34 f4       	brge	.+12     	; 0xe94 <DIO_enuSetPinDirection+0x5a>
     e88:	2d 81       	ldd	r18, Y+5	; 0x05
     e8a:	3e 81       	ldd	r19, Y+6	; 0x06
     e8c:	21 15       	cp	r18, r1
     e8e:	31 05       	cpc	r19, r1
     e90:	71 f0       	breq	.+28     	; 0xeae <DIO_enuSetPinDirection+0x74>
     e92:	b0 c0       	rjmp	.+352    	; 0xff4 <DIO_enuSetPinDirection+0x1ba>
     e94:	6d 81       	ldd	r22, Y+5	; 0x05
     e96:	7e 81       	ldd	r23, Y+6	; 0x06
     e98:	62 30       	cpi	r22, 0x02	; 2
     e9a:	71 05       	cpc	r23, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <DIO_enuSetPinDirection+0x66>
     e9e:	59 c0       	rjmp	.+178    	; 0xf52 <DIO_enuSetPinDirection+0x118>
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <DIO_enuSetPinDirection+0x72>
     eaa:	7c c0       	rjmp	.+248    	; 0xfa4 <DIO_enuSetPinDirection+0x16a>
     eac:	a3 c0       	rjmp	.+326    	; 0xff4 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
     eae:	aa e3       	ldi	r26, 0x3A	; 58
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_enuSetPinDirection+0x90>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	2a 95       	dec	r18
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_enuSetPinDirection+0x8c>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
     ed4:	aa e3       	ldi	r26, 0x3A	; 58
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	ea e3       	ldi	r30, 0x3A	; 58
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b9 01       	movw	r22, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_enuSetPinDirection+0xba>
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	8a 95       	dec	r24
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_enuSetPinDirection+0xb6>
     ef8:	cb 01       	movw	r24, r22
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	7a c0       	rjmp	.+244    	; 0xff4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
     f00:	a7 e3       	ldi	r26, 0x37	; 55
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e3       	ldi	r30, 0x37	; 55
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_enuSetPinDirection+0xe2>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	2a 95       	dec	r18
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_enuSetPinDirection+0xde>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	b9 01       	movw	r22, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_enuSetPinDirection+0x10c>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	8a 95       	dec	r24
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_enuSetPinDirection+0x108>
     f4a:	cb 01       	movw	r24, r22
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	51 c0       	rjmp	.+162    	; 0xff4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
     f52:	a4 e3       	ldi	r26, 0x34	; 52
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e4 e3       	ldi	r30, 0x34	; 52
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_enuSetPinDirection+0x134>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	2a 95       	dec	r18
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_enuSetPinDirection+0x130>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
     f78:	a4 e3       	ldi	r26, 0x34	; 52
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e4 e3       	ldi	r30, 0x34	; 52
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	b9 01       	movw	r22, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_enuSetPinDirection+0x15e>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	8a 95       	dec	r24
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_enuSetPinDirection+0x15a>
     f9c:	cb 01       	movw	r24, r22
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	28 c0       	rjmp	.+80     	; 0xff4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
     fa4:	a1 e3       	ldi	r26, 0x31	; 49
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e3       	ldi	r30, 0x31	; 49
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_enuSetPinDirection+0x186>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	2a 95       	dec	r18
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_enuSetPinDirection+0x182>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
     fca:	a1 e3       	ldi	r26, 0x31	; 49
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e1 e3       	ldi	r30, 0x31	; 49
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	b9 01       	movw	r22, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_enuSetPinDirection+0x1b0>
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	8a 95       	dec	r24
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_enuSetPinDirection+0x1ac>
     fee:	cb 01       	movw	r24, r22
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	26 96       	adiw	r28, 0x06	; 6
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_enuSetPinValue+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_enuSetPinValue+0x8>
    101a:	00 d0       	rcall	.+0      	; 0x101c <DIO_enuSetPinValue+0xa>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	6b 83       	std	Y+3, r22	; 0x03
    1024:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1026:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	08 f0       	brcs	.+2      	; 0x1030 <DIO_enuSetPinValue+0x1e>
    102e:	d1 c0       	rjmp	.+418    	; 0x11d2 <DIO_enuSetPinValue+0x1c0>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	08 f0       	brcs	.+2      	; 0x1038 <DIO_enuSetPinValue+0x26>
    1036:	cd c0       	rjmp	.+410    	; 0x11d2 <DIO_enuSetPinValue+0x1c0>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	08 f0       	brcs	.+2      	; 0x1040 <DIO_enuSetPinValue+0x2e>
    103e:	c9 c0       	rjmp	.+402    	; 0x11d2 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3e 83       	std	Y+6, r19	; 0x06
    1048:	2d 83       	std	Y+5, r18	; 0x05
    104a:	6d 81       	ldd	r22, Y+5	; 0x05
    104c:	7e 81       	ldd	r23, Y+6	; 0x06
    104e:	61 30       	cpi	r22, 0x01	; 1
    1050:	71 05       	cpc	r23, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_enuSetPinValue+0x44>
    1054:	41 c0       	rjmp	.+130    	; 0x10d8 <DIO_enuSetPinValue+0xc6>
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_enuSetPinValue+0x5a>
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	21 15       	cp	r18, r1
    1066:	31 05       	cpc	r19, r1
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_enuSetPinValue+0x74>
    106a:	b0 c0       	rjmp	.+352    	; 0x11cc <DIO_enuSetPinValue+0x1ba>
    106c:	6d 81       	ldd	r22, Y+5	; 0x05
    106e:	7e 81       	ldd	r23, Y+6	; 0x06
    1070:	62 30       	cpi	r22, 0x02	; 2
    1072:	71 05       	cpc	r23, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_enuSetPinValue+0x66>
    1076:	59 c0       	rjmp	.+178    	; 0x112a <DIO_enuSetPinValue+0x118>
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_enuSetPinValue+0x72>
    1082:	7c c0       	rjmp	.+248    	; 0x117c <DIO_enuSetPinValue+0x16a>
    1084:	a3 c0       	rjmp	.+326    	; 0x11cc <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_enuSetPinValue+0x90>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	2a 95       	dec	r18
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_enuSetPinValue+0x8c>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    10ac:	ab e3       	ldi	r26, 0x3B	; 59
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e3       	ldi	r30, 0x3B	; 59
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	b9 01       	movw	r22, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_enuSetPinValue+0xba>
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_enuSetPinValue+0xb6>
    10d0:	cb 01       	movw	r24, r22
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	7a c0       	rjmp	.+244    	; 0x11cc <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    10d8:	a8 e3       	ldi	r26, 0x38	; 56
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_enuSetPinValue+0xe2>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	2a 95       	dec	r18
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_enuSetPinValue+0xde>
    10f8:	80 95       	com	r24
    10fa:	84 23       	and	r24, r20
    10fc:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    10fe:	a8 e3       	ldi	r26, 0x38	; 56
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e8 e3       	ldi	r30, 0x38	; 56
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b9 01       	movw	r22, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_enuSetPinValue+0x10c>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	8a 95       	dec	r24
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_enuSetPinValue+0x108>
    1122:	cb 01       	movw	r24, r22
    1124:	84 2b       	or	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	51 c0       	rjmp	.+162    	; 0x11cc <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    112a:	a5 e3       	ldi	r26, 0x35	; 53
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e3       	ldi	r30, 0x35	; 53
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_enuSetPinValue+0x134>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	2a 95       	dec	r18
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_enuSetPinValue+0x130>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	b9 01       	movw	r22, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_enuSetPinValue+0x15e>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	8a 95       	dec	r24
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_enuSetPinValue+0x15a>
    1174:	cb 01       	movw	r24, r22
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	28 c0       	rjmp	.+80     	; 0x11cc <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    117c:	a2 e3       	ldi	r26, 0x32	; 50
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e2 e3       	ldi	r30, 0x32	; 50
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_enuSetPinValue+0x186>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	2a 95       	dec	r18
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_enuSetPinValue+0x182>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	b9 01       	movw	r22, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_enuSetPinValue+0x1b0>
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_enuSetPinValue+0x1ac>
    11c6:	cb 01       	movw	r24, r22
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d8:	26 96       	adiw	r28, 0x06	; 6
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_enuTogPinValue+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_enuTogPinValue+0x8>
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    11fc:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	08 f0       	brcs	.+2      	; 0x1206 <DIO_enuTogPinValue+0x1c>
    1204:	75 c0       	rjmp	.+234    	; 0x12f0 <DIO_enuTogPinValue+0x106>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 30       	cpi	r24, 0x08	; 8
    120a:	08 f0       	brcs	.+2      	; 0x120e <DIO_enuTogPinValue+0x24>
    120c:	71 c0       	rjmp	.+226    	; 0x12f0 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3d 83       	std	Y+5, r19	; 0x05
    1216:	2c 83       	std	Y+4, r18	; 0x04
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	91 05       	cpc	r25, r1
    1220:	49 f1       	breq	.+82     	; 0x1274 <DIO_enuTogPinValue+0x8a>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	2c f4       	brge	.+10     	; 0x1236 <DIO_enuTogPinValue+0x4c>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 f0       	breq	.+24     	; 0x124c <DIO_enuTogPinValue+0x62>
    1234:	5a c0       	rjmp	.+180    	; 0x12ea <DIO_enuTogPinValue+0x100>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 05       	cpc	r19, r1
    123e:	71 f1       	breq	.+92     	; 0x129c <DIO_enuTogPinValue+0xb2>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	e9 f1       	breq	.+122    	; 0x12c4 <DIO_enuTogPinValue+0xda>
    124a:	4f c0       	rjmp	.+158    	; 0x12ea <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    124c:	ab e3       	ldi	r26, 0x3B	; 59
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_enuTogPinValue+0x80>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_enuTogPinValue+0x7c>
    126e:	84 27       	eor	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	3b c0       	rjmp	.+118    	; 0x12ea <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1274:	a8 e3       	ldi	r26, 0x38	; 56
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_enuTogPinValue+0xa8>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_enuTogPinValue+0xa4>
    1296:	84 27       	eor	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	27 c0       	rjmp	.+78     	; 0x12ea <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    129c:	a5 e3       	ldi	r26, 0x35	; 53
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e3       	ldi	r30, 0x35	; 53
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_enuTogPinValue+0xd0>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_enuTogPinValue+0xcc>
    12be:	84 27       	eor	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	13 c0       	rjmp	.+38     	; 0x12ea <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    12c4:	a2 e3       	ldi	r26, 0x32	; 50
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_enuTogPinValue+0xf8>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_enuTogPinValue+0xf4>
    12e6:	84 27       	eor	r24, r20
    12e8:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	27 97       	sbiw	r28, 0x07	; 7
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	6b 83       	std	Y+3, r22	; 0x03
    131e:	5d 83       	std	Y+5, r21	; 0x05
    1320:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1322:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	09 f4       	brne	.+2      	; 0x132e <DIO_enuGetPinValue+0x28>
    132c:	7c c0       	rjmp	.+248    	; 0x1426 <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	08 f0       	brcs	.+2      	; 0x1336 <DIO_enuGetPinValue+0x30>
    1334:	75 c0       	rjmp	.+234    	; 0x1420 <DIO_enuGetPinValue+0x11a>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_enuGetPinValue+0x38>
    133c:	71 c0       	rjmp	.+226    	; 0x1420 <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3f 83       	std	Y+7, r19	; 0x07
    1346:	2e 83       	std	Y+6, r18	; 0x06
    1348:	4e 81       	ldd	r20, Y+6	; 0x06
    134a:	5f 81       	ldd	r21, Y+7	; 0x07
    134c:	41 30       	cpi	r20, 0x01	; 1
    134e:	51 05       	cpc	r21, r1
    1350:	59 f1       	breq	.+86     	; 0x13a8 <DIO_enuGetPinValue+0xa2>
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	91 05       	cpc	r25, r1
    135a:	34 f4       	brge	.+12     	; 0x1368 <DIO_enuGetPinValue+0x62>
    135c:	2e 81       	ldd	r18, Y+6	; 0x06
    135e:	3f 81       	ldd	r19, Y+7	; 0x07
    1360:	21 15       	cp	r18, r1
    1362:	31 05       	cpc	r19, r1
    1364:	69 f0       	breq	.+26     	; 0x1380 <DIO_enuGetPinValue+0x7a>
    1366:	61 c0       	rjmp	.+194    	; 0x142a <DIO_enuGetPinValue+0x124>
    1368:	4e 81       	ldd	r20, Y+6	; 0x06
    136a:	5f 81       	ldd	r21, Y+7	; 0x07
    136c:	42 30       	cpi	r20, 0x02	; 2
    136e:	51 05       	cpc	r21, r1
    1370:	79 f1       	breq	.+94     	; 0x13d0 <DIO_enuGetPinValue+0xca>
    1372:	8e 81       	ldd	r24, Y+6	; 0x06
    1374:	9f 81       	ldd	r25, Y+7	; 0x07
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_enuGetPinValue+0x78>
    137c:	3d c0       	rjmp	.+122    	; 0x13f8 <DIO_enuGetPinValue+0xf2>
    137e:	55 c0       	rjmp	.+170    	; 0x142a <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1380:	e9 e3       	ldi	r30, 0x39	; 57
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a9 01       	movw	r20, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_enuGetPinValue+0x92>
    1394:	55 95       	asr	r21
    1396:	47 95       	ror	r20
    1398:	8a 95       	dec	r24
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_enuGetPinValue+0x8e>
    139c:	ca 01       	movw	r24, r20
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	ec 81       	ldd	r30, Y+4	; 0x04
    13a2:	fd 81       	ldd	r31, Y+5	; 0x05
    13a4:	80 83       	st	Z, r24
    13a6:	41 c0       	rjmp	.+130    	; 0x142a <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    13a8:	e6 e3       	ldi	r30, 0x36	; 54
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_enuGetPinValue+0xba>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_enuGetPinValue+0xb6>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ca:	fd 81       	ldd	r31, Y+5	; 0x05
    13cc:	80 83       	st	Z, r24
    13ce:	2d c0       	rjmp	.+90     	; 0x142a <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    13d0:	e3 e3       	ldi	r30, 0x33	; 51
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_enuGetPinValue+0xe2>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_enuGetPinValue+0xde>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	ec 81       	ldd	r30, Y+4	; 0x04
    13f2:	fd 81       	ldd	r31, Y+5	; 0x05
    13f4:	80 83       	st	Z, r24
    13f6:	19 c0       	rjmp	.+50     	; 0x142a <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    13f8:	e0 e3       	ldi	r30, 0x30	; 48
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_enuGetPinValue+0x10a>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_enuGetPinValue+0x106>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	ec 81       	ldd	r30, Y+4	; 0x04
    141a:	fd 81       	ldd	r31, Y+5	; 0x05
    141c:	80 83       	st	Z, r24
    141e:	05 c0       	rjmp	.+10     	; 0x142a <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	27 96       	adiw	r28, 0x07	; 7
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	c7 54       	subi	r28, 0x47	; 71
    144c:	d0 40       	sbci	r29, 0x00	; 0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    1458:	fe 01       	movw	r30, r28
    145a:	e9 5b       	subi	r30, 0xB9	; 185
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	10 82       	st	Z, r1
    1460:	fe 01       	movw	r30, r28
    1462:	ed 5b       	subi	r30, 0xBD	; 189
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	ac e0       	ldi	r26, 0x0C	; 12
    146c:	b2 e4       	ldi	r27, 0x42	; 66
    146e:	80 83       	st	Z, r24
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	a2 83       	std	Z+2, r26	; 0x02
    1474:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	8e 01       	movw	r16, r28
    1478:	01 5c       	subi	r16, 0xC1	; 193
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	fe 01       	movw	r30, r28
    147e:	ed 5b       	subi	r30, 0xBD	; 189
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a e7       	ldi	r20, 0x7A	; 122
    1490:	53 e4       	ldi	r21, 0x43	; 67
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	f8 01       	movw	r30, r16
    149c:	80 83       	st	Z, r24
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	a2 83       	std	Z+2, r26	; 0x02
    14a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14a4:	fe 01       	movw	r30, r28
    14a6:	ff 96       	adiw	r30, 0x3f	; 63
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_enuInit+0x8c>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9e af       	std	Y+62, r25	; 0x3e
    14c6:	8d af       	std	Y+61, r24	; 0x3d
    14c8:	46 c0       	rjmp	.+140    	; 0x1556 <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    14ca:	fe 01       	movw	r30, r28
    14cc:	ff 96       	adiw	r30, 0x3f	; 63
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	93 81       	ldd	r25, Z+3	; 0x03
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	64 f5       	brge	.+88     	; 0x153e <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 5b       	subi	r30, 0xBD	; 189
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e af       	std	Y+62, r25	; 0x3e
    1512:	8d af       	std	Y+61, r24	; 0x3d
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <LCD_enuInit+0xf6>
    1516:	89 e1       	ldi	r24, 0x19	; 25
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c af       	std	Y+60, r25	; 0x3c
    151c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    151e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1520:	9c ad       	ldd	r25, Y+60	; 0x3c
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_enuInit+0xe4>
    1526:	9c af       	std	Y+60, r25	; 0x3c
    1528:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8d ad       	ldd	r24, Y+61	; 0x3d
    152c:	9e ad       	ldd	r25, Y+62	; 0x3e
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9e af       	std	Y+62, r25	; 0x3e
    1532:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8d ad       	ldd	r24, Y+61	; 0x3d
    1536:	9e ad       	ldd	r25, Y+62	; 0x3e
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <LCD_enuInit+0xd8>
    153c:	16 c0       	rjmp	.+44     	; 0x156a <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	fe 01       	movw	r30, r28
    1540:	ff 96       	adiw	r30, 0x3f	; 63
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e af       	std	Y+62, r25	; 0x3e
    1554:	8d af       	std	Y+61, r24	; 0x3d
    1556:	8d ad       	ldd	r24, Y+61	; 0x3d
    1558:	9e ad       	ldd	r25, Y+62	; 0x3e
    155a:	9a af       	std	Y+58, r25	; 0x3a
    155c:	89 af       	std	Y+57, r24	; 0x39
    155e:	89 ad       	ldd	r24, Y+57	; 0x39
    1560:	9a ad       	ldd	r25, Y+58	; 0x3a
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <LCD_enuInit+0x124>
    1566:	9a af       	std	Y+58, r25	; 0x3a
    1568:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	67 e0       	ldi	r22, 0x07	; 7
    158c:	41 e0       	ldi	r20, 0x01	; 1
    158e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	66 e0       	ldi	r22, 0x06	; 6
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	65 e0       	ldi	r22, 0x05	; 5
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	64 e0       	ldi	r22, 0x04	; 4
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	63 e0       	ldi	r22, 0x03	; 3
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    15d8:	88 e3       	ldi	r24, 0x38	; 56
    15da:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 5b       	subi	r30, 0xB9	; 185
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 83       	st	Z, r24
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a0 e8       	ldi	r26, 0x80	; 128
    15ee:	bf e3       	ldi	r27, 0x3F	; 63
    15f0:	8d ab       	std	Y+53, r24	; 0x35
    15f2:	9e ab       	std	Y+54, r25	; 0x36
    15f4:	af ab       	std	Y+55, r26	; 0x37
    15f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6d a9       	ldd	r22, Y+53	; 0x35
    15fa:	7e a9       	ldd	r23, Y+54	; 0x36
    15fc:	8f a9       	ldd	r24, Y+55	; 0x37
    15fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a e7       	ldi	r20, 0x7A	; 122
    1606:	53 e4       	ldi	r21, 0x43	; 67
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	89 ab       	std	Y+49, r24	; 0x31
    1612:	9a ab       	std	Y+50, r25	; 0x32
    1614:	ab ab       	std	Y+51, r26	; 0x33
    1616:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1618:	69 a9       	ldd	r22, Y+49	; 0x31
    161a:	7a a9       	ldd	r23, Y+50	; 0x32
    161c:	8b a9       	ldd	r24, Y+51	; 0x33
    161e:	9c a9       	ldd	r25, Y+52	; 0x34
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <LCD_enuInit+0x1fc>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 ab       	std	Y+48, r25	; 0x30
    1636:	8f a7       	std	Y+47, r24	; 0x2f
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    163a:	69 a9       	ldd	r22, Y+49	; 0x31
    163c:	7a a9       	ldd	r23, Y+50	; 0x32
    163e:	8b a9       	ldd	r24, Y+51	; 0x33
    1640:	9c a9       	ldd	r25, Y+52	; 0x34
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6d a9       	ldd	r22, Y+53	; 0x35
    1654:	7e a9       	ldd	r23, Y+54	; 0x36
    1656:	8f a9       	ldd	r24, Y+55	; 0x37
    1658:	98 ad       	ldd	r25, Y+56	; 0x38
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	98 ab       	std	Y+48, r25	; 0x30
    1678:	8f a7       	std	Y+47, r24	; 0x2f
    167a:	0f c0       	rjmp	.+30     	; 0x169a <LCD_enuInit+0x25c>
    167c:	89 e1       	ldi	r24, 0x19	; 25
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9e a7       	std	Y+46, r25	; 0x2e
    1682:	8d a7       	std	Y+45, r24	; 0x2d
    1684:	8d a5       	ldd	r24, Y+45	; 0x2d
    1686:	9e a5       	ldd	r25, Y+46	; 0x2e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <LCD_enuInit+0x24a>
    168c:	9e a7       	std	Y+46, r25	; 0x2e
    168e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	98 ab       	std	Y+48, r25	; 0x30
    1698:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	98 a9       	ldd	r25, Y+48	; 0x30
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <LCD_enuInit+0x23e>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	69 a9       	ldd	r22, Y+49	; 0x31
    16a6:	7a a9       	ldd	r23, Y+50	; 0x32
    16a8:	8b a9       	ldd	r24, Y+51	; 0x33
    16aa:	9c a9       	ldd	r25, Y+52	; 0x34
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	9c a7       	std	Y+44, r25	; 0x2c
    16be:	8b a7       	std	Y+43, r24	; 0x2b
    16c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_enuInit+0x286>
    16c8:	9c a7       	std	Y+44, r25	; 0x2c
    16ca:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    16cc:	8e e0       	ldi	r24, 0x0E	; 14
    16ce:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_invidSendCommand>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e8       	ldi	r26, 0x80	; 128
    16d8:	bf e3       	ldi	r27, 0x3F	; 63
    16da:	8f a3       	std	Y+39, r24	; 0x27
    16dc:	98 a7       	std	Y+40, r25	; 0x28
    16de:	a9 a7       	std	Y+41, r26	; 0x29
    16e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	6f a1       	ldd	r22, Y+39	; 0x27
    16e4:	78 a5       	ldd	r23, Y+40	; 0x28
    16e6:	89 a5       	ldd	r24, Y+41	; 0x29
    16e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	53 e4       	ldi	r21, 0x43	; 67
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8b a3       	std	Y+35, r24	; 0x23
    16fc:	9c a3       	std	Y+36, r25	; 0x24
    16fe:	ad a3       	std	Y+37, r26	; 0x25
    1700:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1702:	6b a1       	ldd	r22, Y+35	; 0x23
    1704:	7c a1       	ldd	r23, Y+36	; 0x24
    1706:	8d a1       	ldd	r24, Y+37	; 0x25
    1708:	9e a1       	ldd	r25, Y+38	; 0x26
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_enuInit+0x2e6>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9a a3       	std	Y+34, r25	; 0x22
    1720:	89 a3       	std	Y+33, r24	; 0x21
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    1724:	6b a1       	ldd	r22, Y+35	; 0x23
    1726:	7c a1       	ldd	r23, Y+36	; 0x24
    1728:	8d a1       	ldd	r24, Y+37	; 0x25
    172a:	9e a1       	ldd	r25, Y+38	; 0x26
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	6f a1       	ldd	r22, Y+39	; 0x27
    173e:	78 a5       	ldd	r23, Y+40	; 0x28
    1740:	89 a5       	ldd	r24, Y+41	; 0x29
    1742:	9a a5       	ldd	r25, Y+42	; 0x2a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9a a3       	std	Y+34, r25	; 0x22
    1762:	89 a3       	std	Y+33, r24	; 0x21
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <LCD_enuInit+0x346>
    1766:	89 e1       	ldi	r24, 0x19	; 25
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	98 a3       	std	Y+32, r25	; 0x20
    176c:	8f 8f       	std	Y+31, r24	; 0x1f
    176e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1770:	98 a1       	ldd	r25, Y+32	; 0x20
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_enuInit+0x334>
    1776:	98 a3       	std	Y+32, r25	; 0x20
    1778:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9a a3       	std	Y+34, r25	; 0x22
    1782:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	89 a1       	ldd	r24, Y+33	; 0x21
    1786:	9a a1       	ldd	r25, Y+34	; 0x22
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <LCD_enuInit+0x328>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9a a3       	std	Y+34, r25	; 0x22
    17a0:	89 a3       	std	Y+33, r24	; 0x21
    17a2:	89 a1       	ldd	r24, Y+33	; 0x21
    17a4:	9a a1       	ldd	r25, Y+34	; 0x22
    17a6:	9e 8f       	std	Y+30, r25	; 0x1e
    17a8:	8d 8f       	std	Y+29, r24	; 0x1d
    17aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_enuInit+0x370>
    17b2:	9e 8f       	std	Y+30, r25	; 0x1e
    17b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_invidSendCommand>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	b0 e4       	ldi	r27, 0x40	; 64
    17c4:	89 8f       	std	Y+25, r24	; 0x19
    17c6:	9a 8f       	std	Y+26, r25	; 0x1a
    17c8:	ab 8f       	std	Y+27, r26	; 0x1b
    17ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17cc:	69 8d       	ldd	r22, Y+25	; 0x19
    17ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4a e7       	ldi	r20, 0x7A	; 122
    17da:	53 e4       	ldi	r21, 0x43	; 67
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	8d 8b       	std	Y+21, r24	; 0x15
    17e6:	9e 8b       	std	Y+22, r25	; 0x16
    17e8:	af 8b       	std	Y+23, r26	; 0x17
    17ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ec:	6d 89       	ldd	r22, Y+21	; 0x15
    17ee:	7e 89       	ldd	r23, Y+22	; 0x16
    17f0:	8f 89       	ldd	r24, Y+23	; 0x17
    17f2:	98 8d       	ldd	r25, Y+24	; 0x18
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1800:	88 23       	and	r24, r24
    1802:	2c f4       	brge	.+10     	; 0x180e <LCD_enuInit+0x3d0>
		__ticks = 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 8b       	std	Y+20, r25	; 0x14
    180a:	8b 8b       	std	Y+19, r24	; 0x13
    180c:	3f c0       	rjmp	.+126    	; 0x188c <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    180e:	6d 89       	ldd	r22, Y+21	; 0x15
    1810:	7e 89       	ldd	r23, Y+22	; 0x16
    1812:	8f 89       	ldd	r24, Y+23	; 0x17
    1814:	98 8d       	ldd	r25, Y+24	; 0x18
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3f ef       	ldi	r19, 0xFF	; 255
    181a:	4f e7       	ldi	r20, 0x7F	; 127
    181c:	57 e4       	ldi	r21, 0x47	; 71
    181e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1822:	18 16       	cp	r1, r24
    1824:	4c f5       	brge	.+82     	; 0x1878 <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	69 8d       	ldd	r22, Y+25	; 0x19
    1828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e2       	ldi	r20, 0x20	; 32
    1834:	51 e4       	ldi	r21, 0x41	; 65
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9c 8b       	std	Y+20, r25	; 0x14
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	0f c0       	rjmp	.+30     	; 0x186e <LCD_enuInit+0x430>
    1850:	89 e1       	ldi	r24, 0x19	; 25
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9a 8b       	std	Y+18, r25	; 0x12
    1856:	89 8b       	std	Y+17, r24	; 0x11
    1858:	89 89       	ldd	r24, Y+17	; 0x11
    185a:	9a 89       	ldd	r25, Y+18	; 0x12
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_enuInit+0x41e>
    1860:	9a 8b       	std	Y+18, r25	; 0x12
    1862:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	9c 8b       	std	Y+20, r25	; 0x14
    186c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186e:	8b 89       	ldd	r24, Y+19	; 0x13
    1870:	9c 89       	ldd	r25, Y+20	; 0x14
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	69 f7       	brne	.-38     	; 0x1850 <LCD_enuInit+0x412>
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	98 8b       	std	Y+16, r25	; 0x10
    1892:	8f 87       	std	Y+15, r24	; 0x0f
    1894:	8f 85       	ldd	r24, Y+15	; 0x0f
    1896:	98 89       	ldd	r25, Y+16	; 0x10
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_enuInit+0x45a>
    189c:	98 8b       	std	Y+16, r25	; 0x10
    189e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_invidSendCommand>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e8       	ldi	r26, 0x80	; 128
    18ac:	bf e3       	ldi	r27, 0x3F	; 63
    18ae:	8b 87       	std	Y+11, r24	; 0x0b
    18b0:	9c 87       	std	Y+12, r25	; 0x0c
    18b2:	ad 87       	std	Y+13, r26	; 0x0d
    18b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a e7       	ldi	r20, 0x7A	; 122
    18c4:	53 e4       	ldi	r21, 0x43	; 67
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8f 83       	std	Y+7, r24	; 0x07
    18d0:	98 87       	std	Y+8, r25	; 0x08
    18d2:	a9 87       	std	Y+9, r26	; 0x09
    18d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d6:	6f 81       	ldd	r22, Y+7	; 0x07
    18d8:	78 85       	ldd	r23, Y+8	; 0x08
    18da:	89 85       	ldd	r24, Y+9	; 0x09
    18dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <LCD_enuInit+0x4ba>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	6b 85       	ldd	r22, Y+11	; 0x0b
    1912:	7c 85       	ldd	r23, Y+12	; 0x0c
    1914:	8d 85       	ldd	r24, Y+13	; 0x0d
    1916:	9e 85       	ldd	r25, Y+14	; 0x0e
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <LCD_enuInit+0x51a>
    193a:	89 e1       	ldi	r24, 0x19	; 25
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9c 83       	std	Y+4, r25	; 0x04
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_enuInit+0x508>
    194a:	9c 83       	std	Y+4, r25	; 0x04
    194c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <LCD_enuInit+0x4fc>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_enuInit+0x544>
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    198a:	80 e8       	ldi	r24, 0x80	; 128
    198c:	0e 94 41 10 	call	0x2082	; 0x2082 <LCD_invidSendCommand>


	return Local_enuErrorState;
    1990:	fe 01       	movw	r30, r28
    1992:	e9 5b       	subi	r30, 0xB9	; 185
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
}
    1998:	c9 5b       	subi	r28, 0xB9	; 185
    199a:	df 4f       	sbci	r29, 0xFF	; 255
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <LCD_enuDisplayChar+0x6>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    19bc:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
    19c8:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <LCD_vidLatch>

	return Local_enuErrorState;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <LCD_enuDisplayString+0x6>
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9b 83       	std	Y+3, r25	; 0x03
    19ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	13 c0       	rjmp	.+38     	; 0x1a16 <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    19f0:	ea 81       	ldd	r30, Y+2	; 0x02
    19f2:	fb 81       	ldd	r31, Y+3	; 0x03
    19f4:	80 81       	ld	r24, Z
    19f6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	9b 81       	ldd	r25, Y+3	; 0x03
    19fe:	fc 01       	movw	r30, r24
    1a00:	31 96       	adiw	r30, 0x01	; 1
    1a02:	80 81       	ld	r24, Z
    1a04:	88 23       	and	r24, r24
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <LCD_enuDisplayString+0x30>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    1a16:	ea 81       	ldd	r30, Y+2	; 0x02
    1a18:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 23       	and	r24, r24
    1a1e:	41 f7       	brne	.-48     	; 0x19f0 <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <LCD_enuSendCommand+0x6>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1a3a:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
    1a46:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <LCD_vidLatch>

	return Local_enuErrorState;
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <LCD_enuGoToPosition+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <LCD_enuGoToPosition+0x8>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	8c 83       	std	Y+4, r24	; 0x04
    1a6a:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    1a6c:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    1a6e:	80 e8       	ldi	r24, 0x80	; 128
    1a70:	8a 83       	std	Y+2, r24	; 0x02
    1a72:	80 ec       	ldi	r24, 0xC0	; 192
    1a74:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	21 50       	subi	r18, 0x01	; 1
    1a80:	30 40       	sbci	r19, 0x00	; 0
    1a82:	ce 01       	movw	r24, r28
    1a84:	02 96       	adiw	r24, 0x02	; 2
    1a86:	fc 01       	movw	r30, r24
    1a88:	e2 0f       	add	r30, r18
    1a8a:	f3 1f       	adc	r31, r19
    1a8c:	90 81       	ld	r25, Z
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	89 0f       	add	r24, r25
    1a92:	81 50       	subi	r24, 0x01	; 1
    1a94:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	28 97       	sbiw	r28, 0x08	; 8
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    1ac4:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    1ac6:	88 85       	ldd	r24, Y+8	; 0x08
    1ac8:	8a 30       	cpi	r24, 0x0A	; 10
    1aca:	28 f4       	brcc	.+10     	; 0x1ad6 <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    1acc:	88 85       	ldd	r24, Y+8	; 0x08
    1ace:	80 5d       	subi	r24, 0xD0	; 208
    1ad0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
    1ad4:	86 c0       	rjmp	.+268    	; 0x1be2 <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    1ad6:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e0       	ldi	r26, 0x00	; 0
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	ac 83       	std	Y+4, r26	; 0x04
    1ae6:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    1ae8:	88 85       	ldd	r24, Y+8	; 0x08
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	2a 81       	ldd	r18, Y+2	; 0x02
    1af4:	3b 81       	ldd	r19, Y+3	; 0x03
    1af6:	4c 81       	ldd	r20, Y+4	; 0x04
    1af8:	5d 81       	ldd	r21, Y+5	; 0x05
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1b02:	da 01       	movw	r26, r20
    1b04:	c9 01       	movw	r24, r18
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	a1 05       	cpc	r26, r1
    1b0a:	b1 05       	cpc	r27, r1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <LCD_enuDisplayNum+0x62>
    1b0e:	53 c0       	rjmp	.+166    	; 0x1bb6 <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	4b c0       	rjmp	.+150    	; 0x1baa <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	ac 81       	ldd	r26, Y+4	; 0x04
    1b1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1b1c:	2a e0       	ldi	r18, 0x0A	; 10
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1b2c:	da 01       	movw	r26, r20
    1b2e:	c9 01       	movw	r24, r18
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    1b32:	9b 83       	std	Y+3, r25	; 0x03
    1b34:	ac 83       	std	Y+4, r26	; 0x04
    1b36:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    1b38:	88 85       	ldd	r24, Y+8	; 0x08
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	2a 81       	ldd	r18, Y+2	; 0x02
    1b44:	3b 81       	ldd	r19, Y+3	; 0x03
    1b46:	4c 81       	ldd	r20, Y+4	; 0x04
    1b48:	5d 81       	ldd	r21, Y+5	; 0x05
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1b52:	da 01       	movw	r26, r20
    1b54:	c9 01       	movw	r24, r18
    1b56:	8a 30       	cpi	r24, 0x0A	; 10
    1b58:	91 05       	cpc	r25, r1
    1b5a:	a1 05       	cpc	r26, r1
    1b5c:	b1 05       	cpc	r27, r1
    1b5e:	90 f4       	brcc	.+36     	; 0x1b84 <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    1b60:	88 85       	ldd	r24, Y+8	; 0x08
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e0       	ldi	r26, 0x00	; 0
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b6e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b70:	5d 81       	ldd	r21, Y+5	; 0x05
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1b7a:	da 01       	movw	r26, r20
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	80 5d       	subi	r24, 0xD0	; 208
    1b80:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    1b84:	88 85       	ldd	r24, Y+8	; 0x08
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e0       	ldi	r26, 0x00	; 0
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b90:	3b 81       	ldd	r19, Y+3	; 0x03
    1b92:	4c 81       	ldd	r20, Y+4	; 0x04
    1b94:	5d 81       	ldd	r21, Y+5	; 0x05
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	99 81       	ldd	r25, Y+1	; 0x01
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	89 17       	cp	r24, r25
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <LCD_enuDisplayNum+0x106>
    1bb2:	b0 cf       	rjmp	.-160    	; 0x1b14 <LCD_enuDisplayNum+0x66>
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bba:	ac 81       	ldd	r26, Y+4	; 0x04
    1bbc:	bd 81       	ldd	r27, Y+5	; 0x05
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__mulsi3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	9b 83       	std	Y+3, r25	; 0x03
    1bd6:	ac 83       	std	Y+4, r26	; 0x04
    1bd8:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	8f 5f       	subi	r24, 0xFF	; 255
    1bde:	8e 83       	std	Y+6, r24	; 0x06
    1be0:	83 cf       	rjmp	.-250    	; 0x1ae8 <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    1be6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1be8:	28 96       	adiw	r28, 0x08	; 8
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2f 97       	sbiw	r28, 0x0f	; 15
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	6c 87       	std	Y+12, r22	; 0x0c
    1c10:	7d 87       	std	Y+13, r23	; 0x0d
    1c12:	8e 87       	std	Y+14, r24	; 0x0e
    1c14:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    1c16:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    1c18:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    1c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c1e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c20:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	af 83       	std	Y+7, r26	; 0x07
    1c28:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	af 81       	ldd	r26, Y+7	; 0x07
    1c34:	b8 85       	ldd	r27, Y+8	; 0x08
    1c36:	8c 87       	std	Y+12, r24	; 0x0c
    1c38:	9d 87       	std	Y+13, r25	; 0x0d
    1c3a:	ae 87       	std	Y+14, r26	; 0x0e
    1c3c:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    1c3e:	6a e0       	ldi	r22, 0x0A	; 10
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c48:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <POWER_u32PowerNumbers>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	ab 83       	std	Y+3, r26	; 0x03
    1c56:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    1c58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c5c:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c5e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c60:	29 81       	ldd	r18, Y+1	; 0x01
    1c62:	3a 81       	ldd	r19, Y+2	; 0x02
    1c64:	4b 81       	ldd	r20, Y+3	; 0x03
    1c66:	5c 81       	ldd	r21, Y+4	; 0x04
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1c70:	da 01       	movw	r26, r20
    1c72:	c9 01       	movw	r24, r18
    1c74:	8c 87       	std	Y+12, r24	; 0x0c
    1c76:	9d 87       	std	Y+13, r25	; 0x0d
    1c78:	ae 87       	std	Y+14, r26	; 0x0e
    1c7a:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    1c7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c80:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c82:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	a1 05       	cpc	r26, r1
    1c88:	b1 05       	cpc	r27, r1
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    1c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8e:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	8a 87       	std	Y+10, r24	; 0x0a
    1c94:	47 c0       	rjmp	.+142    	; 0x1d24 <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    1c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	8a 87       	std	Y+10, r24	; 0x0a
    1c9c:	c8 cf       	rjmp	.-112    	; 0x1c2e <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	af 81       	ldd	r26, Y+7	; 0x07
    1ca4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ca6:	8c 87       	std	Y+12, r24	; 0x0c
    1ca8:	9d 87       	std	Y+13, r25	; 0x0d
    1caa:	ae 87       	std	Y+14, r26	; 0x0e
    1cac:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    1cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	21 50       	subi	r18, 0x01	; 1
    1cb4:	6a e0       	ldi	r22, 0x0A	; 10
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	42 2f       	mov	r20, r18
    1cbe:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <POWER_u32PowerNumbers>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	ab 83       	std	Y+3, r26	; 0x03
    1ccc:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	af 81       	ldd	r26, Y+7	; 0x07
    1cd4:	b8 85       	ldd	r27, Y+8	; 0x08
    1cd6:	29 81       	ldd	r18, Y+1	; 0x01
    1cd8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cda:	4b 81       	ldd	r20, Y+3	; 0x03
    1cdc:	5c 81       	ldd	r21, Y+4	; 0x04
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	af 83       	std	Y+7, r26	; 0x07
    1cf0:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    1cf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cf6:	ae 85       	ldd	r26, Y+14	; 0x0e
    1cf8:	bf 85       	ldd	r27, Y+15	; 0x0f
    1cfa:	29 81       	ldd	r18, Y+1	; 0x01
    1cfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfe:	4b 81       	ldd	r20, Y+3	; 0x03
    1d00:	5c 81       	ldd	r21, Y+4	; 0x04
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 92 14 	call	0x2924	; 0x2924 <__udivmodsi4>
    1d0a:	da 01       	movw	r26, r20
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	8c 87       	std	Y+12, r24	; 0x0c
    1d10:	9d 87       	std	Y+13, r25	; 0x0d
    1d12:	ae 87       	std	Y+14, r26	; 0x0e
    1d14:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    1d16:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d18:	80 5d       	subi	r24, 0xD0	; 208
    1d1a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    1d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d20:	81 50       	subi	r24, 0x01	; 1
    1d22:	8a 87       	std	Y+10, r24	; 0x0a
    1d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d26:	88 23       	and	r24, r24
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <LCD_enuSendSpecialNumber+0x132>
    1d2a:	b9 cf       	rjmp	.-142    	; 0x1c9e <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    1d30:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1d32:	2f 96       	adiw	r28, 0x0f	; 15
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	6e 83       	std	Y+6, r22	; 0x06
    1d5a:	7f 83       	std	Y+7, r23	; 0x07
    1d5c:	88 87       	std	Y+8, r24	; 0x08
    1d5e:	99 87       	std	Y+9, r25	; 0x09
    1d60:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	9b 83       	std	Y+3, r25	; 0x03
    1d6e:	ac 83       	std	Y+4, r26	; 0x04
    1d70:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	15 c0       	rjmp	.+42     	; 0x1da2 <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d7e:	bd 81       	ldd	r27, Y+5	; 0x05
    1d80:	2e 81       	ldd	r18, Y+6	; 0x06
    1d82:	3f 81       	ldd	r19, Y+7	; 0x07
    1d84:	48 85       	ldd	r20, Y+8	; 0x08
    1d86:	59 85       	ldd	r21, Y+9	; 0x09
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__mulsi3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	9b 83       	std	Y+3, r25	; 0x03
    1d98:	ac 83       	std	Y+4, r26	; 0x04
    1d9a:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	99 81       	ldd	r25, Y+1	; 0x01
    1da4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da6:	89 17       	cp	r24, r25
    1da8:	38 f7       	brcc	.-50     	; 0x1d78 <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	ac 81       	ldd	r26, Y+4	; 0x04
    1db0:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	2a 96       	adiw	r28, 0x0a	; 10
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	6d 97       	sbiw	r28, 0x1d	; 29
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	98 2f       	mov	r25, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	99 27       	eor	r25, r25
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	67 e0       	ldi	r22, 0x07	; 7
    1e00:	49 2f       	mov	r20, r25
    1e02:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    1e06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e08:	82 95       	swap	r24
    1e0a:	86 95       	lsr	r24
    1e0c:	86 95       	lsr	r24
    1e0e:	83 70       	andi	r24, 0x03	; 3
    1e10:	98 2f       	mov	r25, r24
    1e12:	91 70       	andi	r25, 0x01	; 1
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	49 2f       	mov	r20, r25
    1e1a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    1e1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e20:	82 95       	swap	r24
    1e22:	86 95       	lsr	r24
    1e24:	87 70       	andi	r24, 0x07	; 7
    1e26:	98 2f       	mov	r25, r24
    1e28:	91 70       	andi	r25, 0x01	; 1
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	49 2f       	mov	r20, r25
    1e30:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    1e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e36:	82 95       	swap	r24
    1e38:	8f 70       	andi	r24, 0x0F	; 15
    1e3a:	98 2f       	mov	r25, r24
    1e3c:	91 70       	andi	r25, 0x01	; 1
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	49 2f       	mov	r20, r25
    1e44:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    1e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	86 95       	lsr	r24
    1e50:	98 2f       	mov	r25, r24
    1e52:	91 70       	andi	r25, 0x01	; 1
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	49 2f       	mov	r20, r25
    1e5a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    1e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e60:	86 95       	lsr	r24
    1e62:	86 95       	lsr	r24
    1e64:	98 2f       	mov	r25, r24
    1e66:	91 70       	andi	r25, 0x01	; 1
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
    1e6c:	49 2f       	mov	r20, r25
    1e6e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    1e72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e74:	86 95       	lsr	r24
    1e76:	98 2f       	mov	r25, r24
    1e78:	91 70       	andi	r25, 0x01	; 1
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	61 e0       	ldi	r22, 0x01	; 1
    1e7e:	49 2f       	mov	r20, r25
    1e80:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    1e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e86:	98 2f       	mov	r25, r24
    1e88:	91 70       	andi	r25, 0x01	; 1
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	49 2f       	mov	r20, r25
    1e90:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	62 e0       	ldi	r22, 0x02	; 2
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e2       	ldi	r26, 0x20	; 32
    1ea4:	b1 e4       	ldi	r27, 0x41	; 65
    1ea6:	89 8f       	std	Y+25, r24	; 0x19
    1ea8:	9a 8f       	std	Y+26, r25	; 0x1a
    1eaa:	ab 8f       	std	Y+27, r26	; 0x1b
    1eac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a e7       	ldi	r20, 0x7A	; 122
    1ebc:	53 e4       	ldi	r21, 0x43	; 67
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8d 8b       	std	Y+21, r24	; 0x15
    1ec8:	9e 8b       	std	Y+22, r25	; 0x16
    1eca:	af 8b       	std	Y+23, r26	; 0x17
    1ecc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ece:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <LCD_vidLatch+0x128>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <LCD_vidLatch+0x188>
    1f32:	89 e1       	ldi	r24, 0x19	; 25
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9a 8b       	std	Y+18, r25	; 0x12
    1f38:	89 8b       	std	Y+17, r24	; 0x11
    1f3a:	89 89       	ldd	r24, Y+17	; 0x11
    1f3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_vidLatch+0x176>
    1f42:	9a 8b       	std	Y+18, r25	; 0x12
    1f44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8b 89       	ldd	r24, Y+19	; 0x13
    1f52:	9c 89       	ldd	r25, Y+20	; 0x14
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <LCD_vidLatch+0x16a>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9c 8b       	std	Y+20, r25	; 0x14
    1f6c:	8b 8b       	std	Y+19, r24	; 0x13
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	98 8b       	std	Y+16, r25	; 0x10
    1f74:	8f 87       	std	Y+15, r24	; 0x0f
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	98 89       	ldd	r25, Y+16	; 0x10
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_vidLatch+0x1b2>
    1f7e:	98 8b       	std	Y+16, r25	; 0x10
    1f80:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e2       	ldi	r26, 0x20	; 32
    1f92:	b1 e4       	ldi	r27, 0x41	; 65
    1f94:	8b 87       	std	Y+11, r24	; 0x0b
    1f96:	9c 87       	std	Y+12, r25	; 0x0c
    1f98:	ad 87       	std	Y+13, r26	; 0x0d
    1f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a e7       	ldi	r20, 0x7A	; 122
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8f 83       	std	Y+7, r24	; 0x07
    1fb6:	98 87       	std	Y+8, r25	; 0x08
    1fb8:	a9 87       	std	Y+9, r26	; 0x09
    1fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <LCD_vidLatch+0x216>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	0f c0       	rjmp	.+30     	; 0x203e <LCD_vidLatch+0x276>
    2020:	89 e1       	ldi	r24, 0x19	; 25
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 83       	std	Y+4, r25	; 0x04
    2026:	8b 83       	std	Y+3, r24	; 0x03
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_vidLatch+0x264>
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <LCD_vidLatch+0x258>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_vidLatch+0x2a0>
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    2070:	6d 96       	adiw	r28, 0x1d	; 29
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	2f 97       	sbiw	r28, 0x0f	; 15
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	98 2f       	mov	r25, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	99 27       	eor	r25, r25
    20be:	99 1f       	adc	r25, r25
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	67 e0       	ldi	r22, 0x07	; 7
    20c4:	49 2f       	mov	r20, r25
    20c6:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	82 95       	swap	r24
    20ce:	86 95       	lsr	r24
    20d0:	86 95       	lsr	r24
    20d2:	83 70       	andi	r24, 0x03	; 3
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 70       	andi	r25, 0x01	; 1
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	49 2f       	mov	r20, r25
    20de:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    20e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e4:	82 95       	swap	r24
    20e6:	86 95       	lsr	r24
    20e8:	87 70       	andi	r24, 0x07	; 7
    20ea:	98 2f       	mov	r25, r24
    20ec:	91 70       	andi	r25, 0x01	; 1
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	65 e0       	ldi	r22, 0x05	; 5
    20f2:	49 2f       	mov	r20, r25
    20f4:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    20f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fa:	82 95       	swap	r24
    20fc:	8f 70       	andi	r24, 0x0F	; 15
    20fe:	98 2f       	mov	r25, r24
    2100:	91 70       	andi	r25, 0x01	; 1
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	64 e0       	ldi	r22, 0x04	; 4
    2106:	49 2f       	mov	r20, r25
    2108:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	86 95       	lsr	r24
    2110:	86 95       	lsr	r24
    2112:	86 95       	lsr	r24
    2114:	98 2f       	mov	r25, r24
    2116:	91 70       	andi	r25, 0x01	; 1
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	63 e0       	ldi	r22, 0x03	; 3
    211c:	49 2f       	mov	r20, r25
    211e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	86 95       	lsr	r24
    2126:	86 95       	lsr	r24
    2128:	98 2f       	mov	r25, r24
    212a:	91 70       	andi	r25, 0x01	; 1
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	49 2f       	mov	r20, r25
    2132:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    2136:	8f 85       	ldd	r24, Y+15	; 0x0f
    2138:	86 95       	lsr	r24
    213a:	98 2f       	mov	r25, r24
    213c:	91 70       	andi	r25, 0x01	; 1
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	49 2f       	mov	r20, r25
    2144:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	98 2f       	mov	r25, r24
    214c:	91 70       	andi	r25, 0x01	; 1
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	49 2f       	mov	r20, r25
    2154:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e2       	ldi	r26, 0x20	; 32
    2168:	b1 e4       	ldi	r27, 0x41	; 65
    216a:	8b 87       	std	Y+11, r24	; 0x0b
    216c:	9c 87       	std	Y+12, r25	; 0x0c
    216e:	ad 87       	std	Y+13, r26	; 0x0d
    2170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	53 e4       	ldi	r21, 0x43	; 67
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 83       	std	Y+7, r24	; 0x07
    218c:	98 87       	std	Y+8, r25	; 0x08
    218e:	a9 87       	std	Y+9, r26	; 0x09
    2190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	3f c0       	rjmp	.+126    	; 0x2232 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	4c f5       	brge	.+82     	; 0x221e <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <LCD_invidSendCommand+0x192>
    21f6:	89 e1       	ldi	r24, 0x19	; 25
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_invidSendCommand+0x180>
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	69 f7       	brne	.-38     	; 0x21f6 <LCD_invidSendCommand+0x174>
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_invidSendCommand+0x1bc>
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	62 e0       	ldi	r22, 0x02	; 2
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>


}
    2250:	2f 96       	adiw	r28, 0x0f	; 15
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    226c:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enuSendCommand>
    2274:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
}
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <KPD_u8GetPressedKey_SamePORT>:
#include "KPD_config.h"
#include "KPD_priv.h"


u8 KPD_u8GetPressedKey_SamePORT(void)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <KPD_u8GetPressedKey_SamePORT+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <KPD_u8GetPressedKey_SamePORT+0x8>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumArr[COLUM_NUM]={KPD_COLUM0_PIN,KPD_COLUM1_PIN,KPD_COLUM2_PIN,KPD_COLUM3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    2292:	1a 82       	std	Y+2, r1	; 0x02
    2294:	5e c0       	rjmp	.+188    	; 0x2352 <KPD_u8GetPressedKey_SamePORT+0xd2>
	{
		//activate current colum
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr[Local_u8ColumIdx],DIO_u8LOW);
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	fc 01       	movw	r30, r24
    229e:	ea 58       	subi	r30, 0x8A	; 138
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	90 81       	ld	r25, Z
    22a4:	83 e0       	ldi	r24, 0x03	; 3
    22a6:	69 2f       	mov	r22, r25
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	3d c0       	rjmp	.+122    	; 0x232c <KPD_u8GetPressedKey_SamePORT+0xac>
		{
			//read current row
			DIO_enuGetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	fc 01       	movw	r30, r24
    22ba:	ee 58       	subi	r30, 0x8E	; 142
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	90 81       	ld	r25, Z
    22c0:	9e 01       	movw	r18, r28
    22c2:	2c 5f       	subi	r18, 0xFC	; 252
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	69 2f       	mov	r22, r25
    22ca:	a9 01       	movw	r20, r18
    22cc:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>

			//check if switch pressed
			if(Local_u8PinState==DIO_u8LOW)
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	88 23       	and	r24, r24
    22d4:	41 f5       	brne	.+80     	; 0x2326 <KPD_u8GetPressedKey_SamePORT+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	48 2f       	mov	r20, r24
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	ca 01       	movw	r24, r20
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	82 0f       	add	r24, r18
    22ee:	93 1f       	adc	r25, r19
    22f0:	fc 01       	movw	r30, r24
    22f2:	e6 58       	subi	r30, 0x86	; 134
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <KPD_u8GetPressedKey_SamePORT+0x9a>

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
				{
					DIO_enuGetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	fc 01       	movw	r30, r24
    2304:	ee 58       	subi	r30, 0x8E	; 142
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	90 81       	ld	r25, Z
    230a:	9e 01       	movw	r18, r28
    230c:	2c 5f       	subi	r18, 0xFC	; 252
    230e:	3f 4f       	sbci	r19, 0xFF	; 255
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	69 2f       	mov	r22, r25
    2314:	a9 01       	movw	r20, r18
    2316:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>
			if(Local_u8PinState==DIO_u8LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	88 23       	and	r24, r24
    231e:	71 f3       	breq	.-36     	; 0x22fc <KPD_u8GetPressedKey_SamePORT+0x7c>
				{
					DIO_enuGetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	1c c0       	rjmp	.+56     	; 0x235e <KPD_u8GetPressedKey_SamePORT+0xde>
	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
	{
		//activate current colum
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr[Local_u8ColumIdx],DIO_u8LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	8f 5f       	subi	r24, 0xFF	; 255
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	84 30       	cpi	r24, 0x04	; 4
    2330:	08 f4       	brcc	.+2      	; 0x2334 <KPD_u8GetPressedKey_SamePORT+0xb4>
    2332:	bf cf       	rjmp	.-130    	; 0x22b2 <KPD_u8GetPressedKey_SamePORT+0x32>
				return Local_u8PressedKey;
			}

		}
		//deactivate current colum
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr[Local_u8ColumIdx],DIO_u8HIGH);
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	ea 58       	subi	r30, 0x8A	; 138
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	90 81       	ld	r25, Z
    2342:	83 e0       	ldi	r24, 0x03	; 3
    2344:	69 2f       	mov	r22, r25
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

	static u8 Local_u8KPDColumArr[COLUM_NUM]={KPD_COLUM0_PIN,KPD_COLUM1_PIN,KPD_COLUM2_PIN,KPD_COLUM3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	8f 5f       	subi	r24, 0xFF	; 255
    2350:	8a 83       	std	Y+2, r24	; 0x02
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	08 f4       	brcc	.+2      	; 0x235a <KPD_u8GetPressedKey_SamePORT+0xda>
    2358:	9e cf       	rjmp	.-196    	; 0x2296 <KPD_u8GetPressedKey_SamePORT+0x16>
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr[Local_u8ColumIdx],DIO_u8HIGH);

	}


	return Local_u8PressedKey;
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <KPD_u8GetPressedKey_DifPORT>:

u8 KPD_u8GetPressedKey_DifPORT(void)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <KPD_u8GetPressedKey_DifPORT+0x6>
    2376:	00 d0       	rcall	.+0      	; 0x2378 <KPD_u8GetPressedKey_DifPORT+0x8>
    2378:	0f 92       	push	r0
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDRowArr_PORT[ROW_NUM]={KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};
	static u8 Local_u8KPDRowArr_PIN[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    2382:	1a 82       	std	Y+2, r1	; 0x02
    2384:	7a c0       	rjmp	.+244    	; 0x247a <KPD_u8GetPressedKey_DifPORT+0x10a>
	{
		//activate current colum
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	fc 01       	movw	r30, r24
    238e:	ea 56       	subi	r30, 0x6A	; 106
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	20 81       	ld	r18, Z
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	ee 56       	subi	r30, 0x6E	; 110
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	90 81       	ld	r25, Z
    23a2:	82 2f       	mov	r24, r18
    23a4:	69 2f       	mov	r22, r25
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	4b c0       	rjmp	.+150    	; 0x2446 <KPD_u8GetPressedKey_DifPORT+0xd6>
		{
			//read current row
			DIO_enuGetPinValue(Local_u8KPDRowArr_PORT[Local_u8RowIdx],Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 57       	subi	r30, 0x72	; 114
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	40 81       	ld	r20, Z
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	fc 01       	movw	r30, r24
    23c6:	e6 57       	subi	r30, 0x76	; 118
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	90 81       	ld	r25, Z
    23cc:	9e 01       	movw	r18, r28
    23ce:	2c 5f       	subi	r18, 0xFC	; 252
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255
    23d2:	84 2f       	mov	r24, r20
    23d4:	69 2f       	mov	r22, r25
    23d6:	a9 01       	movw	r20, r18
    23d8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>

			//check if switch pressed
			if(Local_u8PinState==DIO_u8LOW)
    23dc:	8c 81       	ldd	r24, Y+4	; 0x04
    23de:	88 23       	and	r24, r24
    23e0:	79 f5       	brne	.+94     	; 0x2440 <KPD_u8GetPressedKey_DifPORT+0xd0>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	48 2f       	mov	r20, r24
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	ca 01       	movw	r24, r20
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	fc 01       	movw	r30, r24
    23fe:	e6 56       	subi	r30, 0x66	; 102
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	16 c0       	rjmp	.+44     	; 0x2434 <KPD_u8GetPressedKey_DifPORT+0xc4>

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
				{
					DIO_enuGetPinValue(Local_u8KPDRowArr_PORT[Local_u8RowIdx],Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	fc 01       	movw	r30, r24
    2410:	e2 57       	subi	r30, 0x72	; 114
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	40 81       	ld	r20, Z
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	fc 01       	movw	r30, r24
    241e:	e6 57       	subi	r30, 0x76	; 118
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	90 81       	ld	r25, Z
    2424:	9e 01       	movw	r18, r28
    2426:	2c 5f       	subi	r18, 0xFC	; 252
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	84 2f       	mov	r24, r20
    242c:	69 2f       	mov	r22, r25
    242e:	a9 01       	movw	r20, r18
    2430:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>
			if(Local_u8PinState==DIO_u8LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	88 23       	and	r24, r24
    2438:	39 f3       	breq	.-50     	; 0x2408 <KPD_u8GetPressedKey_DifPORT+0x98>
				{
					DIO_enuGetPinValue(Local_u8KPDRowArr_PORT[Local_u8RowIdx],Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
				}

				return Local_u8PressedKey;
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	23 c0       	rjmp	.+70     	; 0x2486 <KPD_u8GetPressedKey_DifPORT+0x116>
	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
	{
		//activate current colum
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	8f 5f       	subi	r24, 0xFF	; 255
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	08 f4       	brcc	.+2      	; 0x244e <KPD_u8GetPressedKey_DifPORT+0xde>
    244c:	b1 cf       	rjmp	.-158    	; 0x23b0 <KPD_u8GetPressedKey_DifPORT+0x40>
				return Local_u8PressedKey;
			}

		}
		//deactivate current colum
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8HIGH);
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	fc 01       	movw	r30, r24
    2456:	ea 56       	subi	r30, 0x6A	; 106
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	20 81       	ld	r18, Z
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	fc 01       	movw	r30, r24
    2464:	ee 56       	subi	r30, 0x6E	; 110
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	90 81       	ld	r25, Z
    246a:	82 2f       	mov	r24, r18
    246c:	69 2f       	mov	r22, r25
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

	static u8 Local_u8KPDRowArr_PORT[ROW_NUM]={KPD_ROW0_PORT,KPD_ROW1_PORT,KPD_ROW2_PORT,KPD_ROW3_PORT};
	static u8 Local_u8KPDRowArr_PIN[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	08 f4       	brcc	.+2      	; 0x2482 <KPD_u8GetPressedKey_DifPORT+0x112>
    2480:	82 cf       	rjmp	.-252    	; 0x2386 <KPD_u8GetPressedKey_DifPORT+0x16>
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8HIGH);

	}


	return Local_u8PressedKey;
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <KPD_u8GetPressedKey+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <KPD_u8GetPressedKey+0x8>
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumArr_PIN[COLUM_NUM]={KPD_COLUM0_PIN,KPD_COLUM1_PIN,KPD_COLUM2_PIN,KPD_COLUM3_PIN};
	static u8 Local_u8KPDRowArr_PIN[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    24aa:	1a 82       	std	Y+2, r1	; 0x02
    24ac:	5e c0       	rjmp	.+188    	; 0x256a <KPD_u8GetPressedKey+0xd2>
	{
		//activate current colum
#if KPD_SAMEPORT==1

		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	fc 01       	movw	r30, r24
    24b6:	e2 55       	subi	r30, 0x52	; 82
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	90 81       	ld	r25, Z
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	69 2f       	mov	r22, r25
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>
#else
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);
#endif

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    24c6:	19 82       	std	Y+1, r1	; 0x01
    24c8:	3d c0       	rjmp	.+122    	; 0x2544 <KPD_u8GetPressedKey+0xac>
		{
			//read current row
#if KPD_SAMEPORT==1
			DIO_enuGetPinValue(KPD_PORT,Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	fc 01       	movw	r30, r24
    24d2:	e6 55       	subi	r30, 0x56	; 86
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	90 81       	ld	r25, Z
    24d8:	9e 01       	movw	r18, r28
    24da:	2c 5f       	subi	r18, 0xFC	; 252
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	69 2f       	mov	r22, r25
    24e2:	a9 01       	movw	r20, r18
    24e4:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>
#else
			DIO_enuGetPinValue(Local_u8KPDRowArr_PORT[Local_u8RowIdx],Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
#endif

			//check if switch pressed
			if(Local_u8PinState==DIO_u8LOW)
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	88 23       	and	r24, r24
    24ec:	41 f5       	brne	.+80     	; 0x253e <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	48 2f       	mov	r20, r24
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	ca 01       	movw	r24, r20
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	82 0f       	add	r24, r18
    2506:	93 1f       	adc	r25, r19
    2508:	fc 01       	movw	r30, r24
    250a:	ee 54       	subi	r30, 0x4E	; 78
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 81       	ld	r24, Z
    2510:	8b 83       	std	Y+3, r24	; 0x03
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <KPD_u8GetPressedKey+0x9a>

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
				{
#if KPD_SAMEPORT==1
					DIO_enuGetPinValue(KPD_PORT,Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	fc 01       	movw	r30, r24
    251c:	e6 55       	subi	r30, 0x56	; 86
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	90 81       	ld	r25, Z
    2522:	9e 01       	movw	r18, r28
    2524:	2c 5f       	subi	r18, 0xFC	; 252
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	69 2f       	mov	r22, r25
    252c:	a9 01       	movw	r20, r18
    252e:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_enuGetPinValue>
			if(Local_u8PinState==DIO_u8LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumIdx];

				//polling(busy waiting) until the key is realeased
				while(Local_u8PinState==DIO_u8LOW)
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	88 23       	and	r24, r24
    2536:	71 f3       	breq	.-36     	; 0x2514 <KPD_u8GetPressedKey+0x7c>
#else
					DIO_enuGetPinValue(Local_u8KPDRowArr_PORT[Local_u8RowIdx],Local_u8KPDRowArr_PIN[Local_u8RowIdx],&Local_u8PinState);
#endif
				}

				return Local_u8PressedKey;
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	1c c0       	rjmp	.+56     	; 0x2576 <KPD_u8GetPressedKey+0xde>
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);
#else
		DIO_enuSetPinValue(Local_u8KPDColumArr_PORT[Local_u8ColumIdx],Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8LOW);
#endif

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	84 30       	cpi	r24, 0x04	; 4
    2548:	08 f4       	brcc	.+2      	; 0x254c <KPD_u8GetPressedKey+0xb4>
    254a:	bf cf       	rjmp	.-130    	; 0x24ca <KPD_u8GetPressedKey+0x32>
			}

		}
		//deactivate current colum
#if KPD_SAMEPORT==1
		DIO_enuSetPinValue(KPD_PORT,Local_u8KPDColumArr_PIN[Local_u8ColumIdx],DIO_u8HIGH);
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	fc 01       	movw	r30, r24
    2554:	e2 55       	subi	r30, 0x52	; 82
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	90 81       	ld	r25, Z
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	69 2f       	mov	r22, r25
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 09 08 	call	0x1012	; 0x1012 <DIO_enuSetPinValue>

	static u8 Local_u8KPDColumArr_PIN[COLUM_NUM]={KPD_COLUM0_PIN,KPD_COLUM1_PIN,KPD_COLUM2_PIN,KPD_COLUM3_PIN};
	static u8 Local_u8KPDRowArr_PIN[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumIdx=0;Local_u8ColumIdx<COLUM_NUM;Local_u8ColumIdx++ )
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	8a 83       	std	Y+2, r24	; 0x02
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	84 30       	cpi	r24, 0x04	; 4
    256e:	08 f4       	brcc	.+2      	; 0x2572 <KPD_u8GetPressedKey+0xda>
    2570:	9e cf       	rjmp	.-196    	; 0x24ae <KPD_u8GetPressedKey+0x16>
#endif

	}


	return Local_u8PressedKey;
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <APP_s16Solve>:




s16 APP_s16Solve(s16 Copy_s16Operand1 , s16 Copy_s16Operand2 , u8 Copy_u8Operation)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	29 97       	sbiw	r28, 0x09	; 9
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	7c 83       	std	Y+4, r23	; 0x04
    25a2:	6b 83       	std	Y+3, r22	; 0x03
    25a4:	4d 83       	std	Y+5, r20	; 0x05
	switch(Copy_u8Operation)
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	39 87       	std	Y+9, r19	; 0x09
    25ae:	28 87       	std	Y+8, r18	; 0x08
    25b0:	48 85       	ldd	r20, Y+8	; 0x08
    25b2:	59 85       	ldd	r21, Y+9	; 0x09
    25b4:	4b 32       	cpi	r20, 0x2B	; 43
    25b6:	51 05       	cpc	r21, r1
    25b8:	c1 f0       	breq	.+48     	; 0x25ea <APP_s16Solve+0x62>
    25ba:	88 85       	ldd	r24, Y+8	; 0x08
    25bc:	99 85       	ldd	r25, Y+9	; 0x09
    25be:	8c 32       	cpi	r24, 0x2C	; 44
    25c0:	91 05       	cpc	r25, r1
    25c2:	3c f4       	brge	.+14     	; 0x25d2 <APP_s16Solve+0x4a>
    25c4:	28 85       	ldd	r18, Y+8	; 0x08
    25c6:	39 85       	ldd	r19, Y+9	; 0x09
    25c8:	2a 32       	cpi	r18, 0x2A	; 42
    25ca:	31 05       	cpc	r19, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <APP_s16Solve+0x48>
    25ce:	6b c0       	rjmp	.+214    	; 0x26a6 <APP_s16Solve+0x11e>
    25d0:	8a c0       	rjmp	.+276    	; 0x26e6 <APP_s16Solve+0x15e>
    25d2:	48 85       	ldd	r20, Y+8	; 0x08
    25d4:	59 85       	ldd	r21, Y+9	; 0x09
    25d6:	4d 32       	cpi	r20, 0x2D	; 45
    25d8:	51 05       	cpc	r21, r1
    25da:	91 f1       	breq	.+100    	; 0x2640 <APP_s16Solve+0xb8>
    25dc:	88 85       	ldd	r24, Y+8	; 0x08
    25de:	99 85       	ldd	r25, Y+9	; 0x09
    25e0:	8f 32       	cpi	r24, 0x2F	; 47
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <APP_s16Solve+0x60>
    25e6:	6d c0       	rjmp	.+218    	; 0x26c2 <APP_s16Solve+0x13a>
    25e8:	7e c0       	rjmp	.+252    	; 0x26e6 <APP_s16Solve+0x15e>
	{
	case '+':
		if(APP_SignBit)
    25ea:	80 91 c2 00 	lds	r24, 0x00C2
    25ee:	88 23       	and	r24, r24
    25f0:	e9 f0       	breq	.+58     	; 0x262c <APP_s16Solve+0xa4>
		{
			if(Copy_s16Operand2>=Copy_s16Operand1)
    25f2:	2b 81       	ldd	r18, Y+3	; 0x03
    25f4:	3c 81       	ldd	r19, Y+4	; 0x04
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	28 17       	cp	r18, r24
    25fc:	39 07       	cpc	r19, r25
    25fe:	64 f0       	brlt	.+24     	; 0x2618 <APP_s16Solve+0x90>
			{
				APP_SignBit=0;
    2600:	10 92 c2 00 	sts	0x00C2, r1
			return Copy_s16Operand2-Copy_s16Operand1;
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	a9 01       	movw	r20, r18
    260e:	48 1b       	sub	r20, r24
    2610:	59 0b       	sbc	r21, r25
    2612:	5f 83       	std	Y+7, r21	; 0x07
    2614:	4e 83       	std	Y+6, r20	; 0x06
    2616:	6b c0       	rjmp	.+214    	; 0x26ee <APP_s16Solve+0x166>
			}
			else
			{
				return Copy_s16Operand1 - Copy_s16Operand2;
    2618:	29 81       	ldd	r18, Y+1	; 0x01
    261a:	3a 81       	ldd	r19, Y+2	; 0x02
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	a9 01       	movw	r20, r18
    2622:	48 1b       	sub	r20, r24
    2624:	59 0b       	sbc	r21, r25
    2626:	5f 83       	std	Y+7, r21	; 0x07
    2628:	4e 83       	std	Y+6, r20	; 0x06
    262a:	61 c0       	rjmp	.+194    	; 0x26ee <APP_s16Solve+0x166>
			}
		}
		else
		{
		return Copy_s16Operand1 + Copy_s16Operand2;
    262c:	29 81       	ldd	r18, Y+1	; 0x01
    262e:	3a 81       	ldd	r19, Y+2	; 0x02
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	a9 01       	movw	r20, r18
    2636:	48 0f       	add	r20, r24
    2638:	59 1f       	adc	r21, r25
    263a:	5f 83       	std	Y+7, r21	; 0x07
    263c:	4e 83       	std	Y+6, r20	; 0x06
    263e:	57 c0       	rjmp	.+174    	; 0x26ee <APP_s16Solve+0x166>
		}
	case '-':
		if(APP_SignBit)
    2640:	80 91 c2 00 	lds	r24, 0x00C2
    2644:	88 23       	and	r24, r24
    2646:	51 f0       	breq	.+20     	; 0x265c <APP_s16Solve+0xd4>
		{
			return Copy_s16Operand1 + Copy_s16Operand2;
    2648:	29 81       	ldd	r18, Y+1	; 0x01
    264a:	3a 81       	ldd	r19, Y+2	; 0x02
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	a9 01       	movw	r20, r18
    2652:	48 0f       	add	r20, r24
    2654:	59 1f       	adc	r21, r25
    2656:	5f 83       	std	Y+7, r21	; 0x07
    2658:	4e 83       	std	Y+6, r20	; 0x06
    265a:	49 c0       	rjmp	.+146    	; 0x26ee <APP_s16Solve+0x166>
		}
		else
		{
			if(Copy_s16Operand1>=Copy_s16Operand2)
    265c:	29 81       	ldd	r18, Y+1	; 0x01
    265e:	3a 81       	ldd	r19, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	28 17       	cp	r18, r24
    2666:	39 07       	cpc	r19, r25
    2668:	54 f0       	brlt	.+20     	; 0x267e <APP_s16Solve+0xf6>
			{
				return Copy_s16Operand1 - Copy_s16Operand2;
    266a:	29 81       	ldd	r18, Y+1	; 0x01
    266c:	3a 81       	ldd	r19, Y+2	; 0x02
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	a9 01       	movw	r20, r18
    2674:	48 1b       	sub	r20, r24
    2676:	59 0b       	sbc	r21, r25
    2678:	5f 83       	std	Y+7, r21	; 0x07
    267a:	4e 83       	std	Y+6, r20	; 0x06
    267c:	38 c0       	rjmp	.+112    	; 0x26ee <APP_s16Solve+0x166>
			}
			else if(Copy_s16Operand1<Copy_s16Operand2)
    267e:	29 81       	ldd	r18, Y+1	; 0x01
    2680:	3a 81       	ldd	r19, Y+2	; 0x02
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	28 17       	cp	r18, r24
    2688:	39 07       	cpc	r19, r25
    268a:	6c f4       	brge	.+26     	; 0x26a6 <APP_s16Solve+0x11e>
			{
				APP_SignBit=1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 93 c2 00 	sts	0x00C2, r24
				return Copy_s16Operand2 - Copy_s16Operand1;
    2692:	2b 81       	ldd	r18, Y+3	; 0x03
    2694:	3c 81       	ldd	r19, Y+4	; 0x04
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	a9 01       	movw	r20, r18
    269c:	48 1b       	sub	r20, r24
    269e:	59 0b       	sbc	r21, r25
    26a0:	5f 83       	std	Y+7, r21	; 0x07
    26a2:	4e 83       	std	Y+6, r20	; 0x06
    26a4:	24 c0       	rjmp	.+72     	; 0x26ee <APP_s16Solve+0x166>
			}
		}
	case '*':
		return Copy_s16Operand1 * Copy_s16Operand2;
    26a6:	29 81       	ldd	r18, Y+1	; 0x01
    26a8:	3a 81       	ldd	r19, Y+2	; 0x02
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	28 9f       	mul	r18, r24
    26b0:	a0 01       	movw	r20, r0
    26b2:	29 9f       	mul	r18, r25
    26b4:	50 0d       	add	r21, r0
    26b6:	38 9f       	mul	r19, r24
    26b8:	50 0d       	add	r21, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	5f 83       	std	Y+7, r21	; 0x07
    26be:	4e 83       	std	Y+6, r20	; 0x06
    26c0:	16 c0       	rjmp	.+44     	; 0x26ee <APP_s16Solve+0x166>
	case '/':
		if(Copy_s16Operand2==0)
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	19 f4       	brne	.+6      	; 0x26d0 <APP_s16Solve+0x148>
		{
			return 0;
    26ca:	1f 82       	std	Y+7, r1	; 0x07
    26cc:	1e 82       	std	Y+6, r1	; 0x06
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <APP_s16Solve+0x166>
		}
		else
		{
			return Copy_s16Operand1 / Copy_s16Operand2;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	2b 81       	ldd	r18, Y+3	; 0x03
    26d6:	3c 81       	ldd	r19, Y+4	; 0x04
    26d8:	b9 01       	movw	r22, r18
    26da:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
    26de:	cb 01       	movw	r24, r22
    26e0:	9f 83       	std	Y+7, r25	; 0x07
    26e2:	8e 83       	std	Y+6, r24	; 0x06
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <APP_s16Solve+0x166>
		}
	default:
		return Copy_s16Operand1;
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	9f 83       	std	Y+7, r25	; 0x07
    26ec:	8e 83       	std	Y+6, r24	; 0x06
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	9f 81       	ldd	r25, Y+7	; 0x07
	}
}
    26f2:	29 96       	adiw	r28, 0x09	; 9
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <APP_enuCalculator>:


ES_t APP_enuCalculator()
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	29 97       	sbiw	r28, 0x09	; 9
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    2718:	19 86       	std	Y+9, r1	; 0x09

	LCD_enuInit();
    271a:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_enuInit>

	s16 Local_u8Operand1=0,Local_u8Operand2=0;
    271e:	18 86       	std	Y+8, r1	; 0x08
    2720:	1f 82       	std	Y+7, r1	; 0x07
    2722:	1e 82       	std	Y+6, r1	; 0x06
    2724:	1d 82       	std	Y+5, r1	; 0x05
	{
		u8 Local_u8PressedKey;

		do
		{
			Local_u8PressedKey=KPD_u8GetPressedKey();
    2726:	0e 94 4c 12 	call	0x2498	; 0x2498 <KPD_u8GetPressedKey>
    272a:	89 83       	std	Y+1, r24	; 0x01
		}while(Local_u8PressedKey==0xff);
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	8f 3f       	cpi	r24, 0xFF	; 255
    2730:	d1 f3       	breq	.-12     	; 0x2726 <APP_enuCalculator+0x22>

		if(Local_u8PressedKey>='0' && Local_u8PressedKey<='9')
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	80 33       	cpi	r24, 0x30	; 48
    2736:	08 f4       	brcc	.+2      	; 0x273a <APP_enuCalculator+0x36>
    2738:	50 c0       	rjmp	.+160    	; 0x27da <APP_enuCalculator+0xd6>
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	8a 33       	cpi	r24, 0x3A	; 58
    273e:	08 f0       	brcs	.+2      	; 0x2742 <APP_enuCalculator+0x3e>
    2740:	4c c0       	rjmp	.+152    	; 0x27da <APP_enuCalculator+0xd6>
		{
			if(Local_NUMflag==0)
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	88 23       	and	r24, r24
    2746:	71 f4       	brne	.+28     	; 0x2764 <APP_enuCalculator+0x60>
			{
				Local_NUMflag=1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	8a 83       	std	Y+2, r24	; 0x02

				Local_u8Operand1=Local_u8PressedKey-'0';
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	c0 97       	sbiw	r24, 0x30	; 48
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	8f 83       	std	Y+7, r24	; 0x07

				LCD_enuClearLcd();
    2758:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
				LCD_enuDisplayNum(Local_u8Operand1);
    275c:	8f 81       	ldd	r24, Y+7	; 0x07
    275e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    2762:	e1 cf       	rjmp	.-62     	; 0x2726 <APP_enuCalculator+0x22>

			}
			else if(Local_NUMflag==1)
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	81 30       	cpi	r24, 0x01	; 1
    2768:	d1 f4       	brne	.+52     	; 0x279e <APP_enuCalculator+0x9a>
			{
				Local_u8Operand1=Local_u8Operand1*10+(Local_u8PressedKey-'0');
    276a:	8f 81       	ldd	r24, Y+7	; 0x07
    276c:	98 85       	ldd	r25, Y+8	; 0x08
    276e:	9c 01       	movw	r18, r24
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	c9 01       	movw	r24, r18
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	28 0f       	add	r18, r24
    2780:	39 1f       	adc	r19, r25
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	c0 97       	sbiw	r24, 0x30	; 48
    278a:	82 0f       	add	r24, r18
    278c:	93 1f       	adc	r25, r19
    278e:	98 87       	std	Y+8, r25	; 0x08
    2790:	8f 83       	std	Y+7, r24	; 0x07

				LCD_enuClearLcd();
    2792:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
				LCD_enuDisplayNum(Local_u8Operand1);
    2796:	8f 81       	ldd	r24, Y+7	; 0x07
    2798:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    279c:	c4 cf       	rjmp	.-120    	; 0x2726 <APP_enuCalculator+0x22>

			}
			else if(Local_NUMflag==2)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	09 f6       	brne	.-126    	; 0x2726 <APP_enuCalculator+0x22>
			{
				Local_u8Operand2=Local_u8Operand2*10+(Local_u8PressedKey-'0');
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9c 01       	movw	r18, r24
    27aa:	22 0f       	add	r18, r18
    27ac:	33 1f       	adc	r19, r19
    27ae:	c9 01       	movw	r24, r18
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	28 0f       	add	r18, r24
    27ba:	39 1f       	adc	r19, r25
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	c0 97       	sbiw	r24, 0x30	; 48
    27c4:	82 0f       	add	r24, r18
    27c6:	93 1f       	adc	r25, r19
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05

				Local_OPflag=0;
    27cc:	1b 82       	std	Y+3, r1	; 0x03

				LCD_enuClearLcd();
    27ce:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
				LCD_enuDisplayNum(Local_u8Operand2);
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    27d8:	a6 cf       	rjmp	.-180    	; 0x2726 <APP_enuCalculator+0x22>
			}
		}
		else if (Local_u8PressedKey == '+' || Local_u8PressedKey == '-' || Local_u8PressedKey == '*' || Local_u8PressedKey == '/')
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	8b 32       	cpi	r24, 0x2B	; 43
    27de:	49 f0       	breq	.+18     	; 0x27f2 <APP_enuCalculator+0xee>
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	8d 32       	cpi	r24, 0x2D	; 45
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <APP_enuCalculator+0xee>
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	8a 32       	cpi	r24, 0x2A	; 42
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <APP_enuCalculator+0xee>
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	8f 32       	cpi	r24, 0x2F	; 47
    27f0:	49 f5       	brne	.+82     	; 0x2844 <APP_enuCalculator+0x140>
		{
			if(!Local_OPflag)
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	88 23       	and	r24, r24
    27f6:	09 f5       	brne	.+66     	; 0x283a <APP_enuCalculator+0x136>
			{
				if(Local_NUMflag==2)
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	82 30       	cpi	r24, 0x02	; 2
    27fc:	e1 f4       	brne	.+56     	; 0x2836 <APP_enuCalculator+0x132>
				{
					Local_u8Operand1=APP_s16Solve(Local_u8Operand1,Local_u8Operand2,Local_u8Operation);
    27fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2800:	98 85       	ldd	r25, Y+8	; 0x08
    2802:	2d 81       	ldd	r18, Y+5	; 0x05
    2804:	3e 81       	ldd	r19, Y+6	; 0x06
    2806:	b9 01       	movw	r22, r18
    2808:	4c 81       	ldd	r20, Y+4	; 0x04
    280a:	0e 94 c4 12 	call	0x2588	; 0x2588 <APP_s16Solve>
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	8f 83       	std	Y+7, r24	; 0x07

					Local_u8Operand2=0;
    2812:	1e 82       	std	Y+6, r1	; 0x06
    2814:	1d 82       	std	Y+5, r1	; 0x05

					LCD_enuClearLcd();
    2816:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
					if(APP_SignBit)
    281a:	80 91 c2 00 	lds	r24, 0x00C2
    281e:	88 23       	and	r24, r24
    2820:	39 f0       	breq	.+14     	; 0x2830 <APP_enuCalculator+0x12c>
					{
						//APP_SignBit=0;
						LCD_enuDisplayChar('-');
    2822:	8d e2       	ldi	r24, 0x2D	; 45
    2824:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
						LCD_enuDisplayNum(Local_u8Operand1);
    2828:	8f 81       	ldd	r24, Y+7	; 0x07
    282a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <APP_enuCalculator+0x132>
					}
					else
					{
						LCD_enuDisplayNum(Local_u8Operand1);
    2830:	8f 81       	ldd	r24, Y+7	; 0x07
    2832:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
					}
				}
				Local_NUMflag=2;
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	8a 83       	std	Y+2, r24	; 0x02
			}
			Local_u8Operation=Local_u8PressedKey;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	8c 83       	std	Y+4, r24	; 0x04

			Local_OPflag=1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	8b 83       	std	Y+3, r24	; 0x03
    2842:	71 cf       	rjmp	.-286    	; 0x2726 <APP_enuCalculator+0x22>
		}
		else if(Local_u8PressedKey=='=')
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	8d 33       	cpi	r24, 0x3D	; 61
    2848:	01 f5       	brne	.+64     	; 0x288a <APP_enuCalculator+0x186>
		{
			Local_u8Operand1=APP_s16Solve(Local_u8Operand1,Local_u8Operand2,Local_u8Operation);
    284a:	8f 81       	ldd	r24, Y+7	; 0x07
    284c:	98 85       	ldd	r25, Y+8	; 0x08
    284e:	2d 81       	ldd	r18, Y+5	; 0x05
    2850:	3e 81       	ldd	r19, Y+6	; 0x06
    2852:	b9 01       	movw	r22, r18
    2854:	4c 81       	ldd	r20, Y+4	; 0x04
    2856:	0e 94 c4 12 	call	0x2588	; 0x2588 <APP_s16Solve>
    285a:	98 87       	std	Y+8, r25	; 0x08
    285c:	8f 83       	std	Y+7, r24	; 0x07

			Local_u8Operand2=0;
    285e:	1e 82       	std	Y+6, r1	; 0x06
    2860:	1d 82       	std	Y+5, r1	; 0x05

			Local_u8Operation=0;
    2862:	1c 82       	std	Y+4, r1	; 0x04

			Local_OPflag=0;
    2864:	1b 82       	std	Y+3, r1	; 0x03

			Local_NUMflag=0;
    2866:	1a 82       	std	Y+2, r1	; 0x02

			LCD_enuClearLcd();
    2868:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
			if(APP_SignBit)
    286c:	80 91 c2 00 	lds	r24, 0x00C2
    2870:	88 23       	and	r24, r24
    2872:	39 f0       	breq	.+14     	; 0x2882 <APP_enuCalculator+0x17e>
			{
				//APP_SignBit=0;
				LCD_enuDisplayChar('-');
    2874:	8d e2       	ldi	r24, 0x2D	; 45
    2876:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_enuDisplayChar>
				LCD_enuDisplayNum(Local_u8Operand1);
    287a:	8f 81       	ldd	r24, Y+7	; 0x07
    287c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    2880:	52 cf       	rjmp	.-348    	; 0x2726 <APP_enuCalculator+0x22>
			}
			else
			{
				LCD_enuDisplayNum(Local_u8Operand1);
    2882:	8f 81       	ldd	r24, Y+7	; 0x07
    2884:	0e 94 57 0d 	call	0x1aae	; 0x1aae <LCD_enuDisplayNum>
    2888:	4e cf       	rjmp	.-356    	; 0x2726 <APP_enuCalculator+0x22>
			}
		}
		else if(Local_u8PressedKey=='c')
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	83 36       	cpi	r24, 0x63	; 99
    288e:	09 f0       	breq	.+2      	; 0x2892 <APP_enuCalculator+0x18e>
    2890:	4a cf       	rjmp	.-364    	; 0x2726 <APP_enuCalculator+0x22>
		{
			Local_u8Operand1=0;
    2892:	18 86       	std	Y+8, r1	; 0x08
    2894:	1f 82       	std	Y+7, r1	; 0x07

			Local_u8Operand2=0;
    2896:	1e 82       	std	Y+6, r1	; 0x06
    2898:	1d 82       	std	Y+5, r1	; 0x05

			Local_u8Operation=0;
    289a:	1c 82       	std	Y+4, r1	; 0x04

			Local_OPflag=0;
    289c:	1b 82       	std	Y+3, r1	; 0x03

			Local_NUMflag=0;
    289e:	1a 82       	std	Y+2, r1	; 0x02

			APP_SignBit=0;
    28a0:	10 92 c2 00 	sts	0x00C2, r1

			LCD_enuClearLcd();
    28a4:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_enuClearLcd>
    28a8:	3e cf       	rjmp	.-388    	; 0x2726 <APP_enuCalculator+0x22>

000028aa <main>:
#include "APP_int.h"

#include "util/delay.h"

int main(void)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    28b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
	LCD_enuInit();
    28b6:	0e 94 1f 0a 	call	0x143e	; 0x143e <LCD_enuInit>
	APP_enuCalculator();
    28ba:	0e 94 82 13 	call	0x2704	; 0x2704 <APP_enuCalculator>
    28be:	ff cf       	rjmp	.-2      	; 0x28be <main+0x14>

000028c0 <__mulsi3>:
    28c0:	62 9f       	mul	r22, r18
    28c2:	d0 01       	movw	r26, r0
    28c4:	73 9f       	mul	r23, r19
    28c6:	f0 01       	movw	r30, r0
    28c8:	82 9f       	mul	r24, r18
    28ca:	e0 0d       	add	r30, r0
    28cc:	f1 1d       	adc	r31, r1
    28ce:	64 9f       	mul	r22, r20
    28d0:	e0 0d       	add	r30, r0
    28d2:	f1 1d       	adc	r31, r1
    28d4:	92 9f       	mul	r25, r18
    28d6:	f0 0d       	add	r31, r0
    28d8:	83 9f       	mul	r24, r19
    28da:	f0 0d       	add	r31, r0
    28dc:	74 9f       	mul	r23, r20
    28de:	f0 0d       	add	r31, r0
    28e0:	65 9f       	mul	r22, r21
    28e2:	f0 0d       	add	r31, r0
    28e4:	99 27       	eor	r25, r25
    28e6:	72 9f       	mul	r23, r18
    28e8:	b0 0d       	add	r27, r0
    28ea:	e1 1d       	adc	r30, r1
    28ec:	f9 1f       	adc	r31, r25
    28ee:	63 9f       	mul	r22, r19
    28f0:	b0 0d       	add	r27, r0
    28f2:	e1 1d       	adc	r30, r1
    28f4:	f9 1f       	adc	r31, r25
    28f6:	bd 01       	movw	r22, r26
    28f8:	cf 01       	movw	r24, r30
    28fa:	11 24       	eor	r1, r1
    28fc:	08 95       	ret

000028fe <__divmodhi4>:
    28fe:	97 fb       	bst	r25, 7
    2900:	09 2e       	mov	r0, r25
    2902:	07 26       	eor	r0, r23
    2904:	0a d0       	rcall	.+20     	; 0x291a <__divmodhi4_neg1>
    2906:	77 fd       	sbrc	r23, 7
    2908:	04 d0       	rcall	.+8      	; 0x2912 <__divmodhi4_neg2>
    290a:	2e d0       	rcall	.+92     	; 0x2968 <__udivmodhi4>
    290c:	06 d0       	rcall	.+12     	; 0x291a <__divmodhi4_neg1>
    290e:	00 20       	and	r0, r0
    2910:	1a f4       	brpl	.+6      	; 0x2918 <__divmodhi4_exit>

00002912 <__divmodhi4_neg2>:
    2912:	70 95       	com	r23
    2914:	61 95       	neg	r22
    2916:	7f 4f       	sbci	r23, 0xFF	; 255

00002918 <__divmodhi4_exit>:
    2918:	08 95       	ret

0000291a <__divmodhi4_neg1>:
    291a:	f6 f7       	brtc	.-4      	; 0x2918 <__divmodhi4_exit>
    291c:	90 95       	com	r25
    291e:	81 95       	neg	r24
    2920:	9f 4f       	sbci	r25, 0xFF	; 255
    2922:	08 95       	ret

00002924 <__udivmodsi4>:
    2924:	a1 e2       	ldi	r26, 0x21	; 33
    2926:	1a 2e       	mov	r1, r26
    2928:	aa 1b       	sub	r26, r26
    292a:	bb 1b       	sub	r27, r27
    292c:	fd 01       	movw	r30, r26
    292e:	0d c0       	rjmp	.+26     	; 0x294a <__udivmodsi4_ep>

00002930 <__udivmodsi4_loop>:
    2930:	aa 1f       	adc	r26, r26
    2932:	bb 1f       	adc	r27, r27
    2934:	ee 1f       	adc	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	a2 17       	cp	r26, r18
    293a:	b3 07       	cpc	r27, r19
    293c:	e4 07       	cpc	r30, r20
    293e:	f5 07       	cpc	r31, r21
    2940:	20 f0       	brcs	.+8      	; 0x294a <__udivmodsi4_ep>
    2942:	a2 1b       	sub	r26, r18
    2944:	b3 0b       	sbc	r27, r19
    2946:	e4 0b       	sbc	r30, r20
    2948:	f5 0b       	sbc	r31, r21

0000294a <__udivmodsi4_ep>:
    294a:	66 1f       	adc	r22, r22
    294c:	77 1f       	adc	r23, r23
    294e:	88 1f       	adc	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	1a 94       	dec	r1
    2954:	69 f7       	brne	.-38     	; 0x2930 <__udivmodsi4_loop>
    2956:	60 95       	com	r22
    2958:	70 95       	com	r23
    295a:	80 95       	com	r24
    295c:	90 95       	com	r25
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	bd 01       	movw	r22, r26
    2964:	cf 01       	movw	r24, r30
    2966:	08 95       	ret

00002968 <__udivmodhi4>:
    2968:	aa 1b       	sub	r26, r26
    296a:	bb 1b       	sub	r27, r27
    296c:	51 e1       	ldi	r21, 0x11	; 17
    296e:	07 c0       	rjmp	.+14     	; 0x297e <__udivmodhi4_ep>

00002970 <__udivmodhi4_loop>:
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	a6 17       	cp	r26, r22
    2976:	b7 07       	cpc	r27, r23
    2978:	10 f0       	brcs	.+4      	; 0x297e <__udivmodhi4_ep>
    297a:	a6 1b       	sub	r26, r22
    297c:	b7 0b       	sbc	r27, r23

0000297e <__udivmodhi4_ep>:
    297e:	88 1f       	adc	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	5a 95       	dec	r21
    2984:	a9 f7       	brne	.-22     	; 0x2970 <__udivmodhi4_loop>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	08 95       	ret

00002990 <__prologue_saves__>:
    2990:	2f 92       	push	r2
    2992:	3f 92       	push	r3
    2994:	4f 92       	push	r4
    2996:	5f 92       	push	r5
    2998:	6f 92       	push	r6
    299a:	7f 92       	push	r7
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	ca 1b       	sub	r28, r26
    29ba:	db 0b       	sbc	r29, r27
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	09 94       	ijmp

000029c8 <__epilogue_restores__>:
    29c8:	2a 88       	ldd	r2, Y+18	; 0x12
    29ca:	39 88       	ldd	r3, Y+17	; 0x11
    29cc:	48 88       	ldd	r4, Y+16	; 0x10
    29ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    29d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29da:	b9 84       	ldd	r11, Y+9	; 0x09
    29dc:	c8 84       	ldd	r12, Y+8	; 0x08
    29de:	df 80       	ldd	r13, Y+7	; 0x07
    29e0:	ee 80       	ldd	r14, Y+6	; 0x06
    29e2:	fd 80       	ldd	r15, Y+5	; 0x05
    29e4:	0c 81       	ldd	r16, Y+4	; 0x04
    29e6:	1b 81       	ldd	r17, Y+3	; 0x03
    29e8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ea:	b9 81       	ldd	r27, Y+1	; 0x01
    29ec:	ce 0f       	add	r28, r30
    29ee:	d1 1d       	adc	r29, r1
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	ed 01       	movw	r28, r26
    29fc:	08 95       	ret

000029fe <_exit>:
    29fe:	f8 94       	cli

00002a00 <__stop_program>:
    2a00:	ff cf       	rjmp	.-2      	; 0x2a00 <__stop_program>
